#!/bin/bash
#
# i3xGnome Enhanced - Ultra-robust launcher script for i3 with GNOME Session integration
# 
# This enhanced version includes comprehensive crash prevention, robust D-Bus handling,
# exponential backoff retry mechanisms, and emergency fallback modes.
#

set -euo pipefail

# Configuration variables
VERSION="2.1.0-crash-fix"
SCRIPT_NAME="i3-gnome-enhanced"
DEBUG_MODE="${DEBUG_MODE:-false}"

# Script configuration
readonly LOG_FILE="${XDG_CACHE_HOME:-$HOME/.cache}/i3-gnome-enhanced.log"
readonly STARTUP_TIMEOUT="${STARTUP_TIMEOUT:-30}"

# Enhanced timeout and retry configuration
readonly DBUS_INITIAL_TIMEOUT=5
readonly DBUS_MAX_TIMEOUT=20
readonly MAX_RETRIES=5
readonly SERVICE_CHECK_TIMEOUT=25

# Crash prevention configuration
readonly NVIDIA_CONFIG_FILE="/etc/X11/xorg.conf.d/20-nvidia.conf"
readonly GDM_CONFIG_FILE="/etc/gdm3/custom.conf"
readonly FALLBACK_CONFIG_DIR="$HOME/.config/i3-gnome/fallback"

# State tracking
SESSION_REGISTERED=0
FALLBACK_MODE=false
NVIDIA_DETECTED=false
SERVICES_READY=false

# Ensure log directory exists
mkdir -p "$(dirname "$LOG_FILE")" "$FALLBACK_CONFIG_DIR"

# Enhanced logging with timestamps and levels
log() {
    local level="$1"
    local message="$2"
    local timestamp
    timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp][$SCRIPT_NAME][$level] $message" | tee -a "$LOG_FILE" >&2
    logger -t "$SCRIPT_NAME" "[$level] $message" 2>/dev/null || true
}

log_info() {
    log "INFO" "$1"
}

log_warning() {
    log "WARN" "$1"
}

log_error() {
    log "ERROR" "$1"
}

log_debug() {
    if [ "${DEBUG:-0}" = "1" ] || [ "${DEBUG_MODE}" = "true" ]; then
        log "DEBUG" "$1"
    fi
}

log_critical() {
    log "CRITICAL" "$1"
}

# Enhanced error handling with recovery options
error_exit() {
    log_critical "$1"
    
    # Try emergency recovery before exiting
    if [ "$FALLBACK_MODE" = "false" ]; then
        log_info "Attempting emergency recovery in fallback mode"
        FALLBACK_MODE=true
        emergency_recovery
        return $?
    fi
    
    cleanup
    exit 1
}

# Enhanced D-Bus function with exponential backoff and comprehensive error handling
robust_dbus_call() {
    local dest="$1"
    local path="$2"
    local interface="$3"
    local method="$4"
    shift 4
    local args=("$@")
    
    local attempt=0
    local timeout=$DBUS_INITIAL_TIMEOUT
    local max_timeout=$DBUS_MAX_TIMEOUT
    
    log_debug "D-Bus call: $dest -> $path.$interface.$method (args: ${args[*]:-none})"
    
    while [ $attempt -lt $MAX_RETRIES ]; do
        attempt=$((attempt + 1))
        log_debug "D-Bus attempt $attempt/$MAX_RETRIES (timeout: ${timeout}s)"
        
        # Construct dbus-send command
        local cmd=(
            "timeout" "$timeout"
            "dbus-send" "--session" "--print-reply"
            "--dest=$dest" "$path"
            "$interface.$method"
        )
        cmd+=("${args[@]}")
        
        # Execute with comprehensive error handling
        local exit_code=0
        local output=""
        if output=$("${cmd[@]}" 2>&1); then
            log_debug "D-Bus call succeeded on attempt $attempt"
            return 0
        else
            exit_code=$?
            log_warning "D-Bus call failed (attempt $attempt): exit code $exit_code"
            log_debug "D-Bus error output: $output"
            
            # Analyze failure reason
            case $exit_code in
                124)
                    log_warning "D-Bus call timed out after ${timeout}s"
                    ;;
                1)
                    if echo "$output" | grep -q "org.freedesktop.DBus.Error.ServiceUnknown"; then
                        log_warning "D-Bus service $dest not available"
                    elif echo "$output" | grep -q "org.freedesktop.DBus.Error.NoReply"; then
                        log_warning "D-Bus service $dest not responding"
                    else
                        log_warning "Generic D-Bus error: $output"
                    fi
                    ;;
                *)
                    log_warning "Unexpected D-Bus error: $output"
                    ;;
            esac
        fi
        
        # Don't retry if we've reached max attempts
        if [ $attempt -ge $MAX_RETRIES ]; then
            log_error "D-Bus call failed after $MAX_RETRIES attempts"
            return 1
        fi
        
        # Exponential backoff with jitter
        local backoff=$((attempt * 2))
        local jitter=$((RANDOM % 3 + 1))
        local sleep_time=$((backoff + jitter))
        
        log_debug "Backing off for ${sleep_time}s before retry"
        sleep "$sleep_time"
        
        # Increase timeout for next attempt (up to max)
        if [ $timeout -lt $max_timeout ]; then
            timeout=$((timeout + 3))
            if [ $timeout -gt $max_timeout ]; then
                timeout=$max_timeout
            fi
        fi
    done
    
    log_error "D-Bus call ultimately failed after all retries"
    return 1
}

# Enhanced hardware detection with comprehensive GPU support
detect_hardware() {
    log_info "Performing comprehensive hardware detection"
    
    # Detect NVIDIA GPU
    if lspci | grep -i nvidia >/dev/null 2>&1; then
        NVIDIA_DETECTED=true
        log_info "NVIDIA GPU detected"
        
        # Get NVIDIA driver version if available
        if command -v nvidia-smi >/dev/null 2>&1; then
            local nvidia_version
            nvidia_version=$(nvidia-smi --query-gpu=driver_version --format=csv,noheader,nounits 2>/dev/null | head -1 || echo "unknown")
            log_info "NVIDIA Driver version: $nvidia_version"
        else
            log_warning "NVIDIA GPU detected but nvidia-smi not available"
        fi
        
        # Check DRM modeset status
        if [ -f /sys/module/nvidia_drm/parameters/modeset ]; then
            local modeset_status
            modeset_status=$(cat /sys/module/nvidia_drm/parameters/modeset 2>/dev/null || echo "unknown")
            log_info "NVIDIA DRM modeset: $modeset_status"
        fi
    fi
    
    # Detect AMD GPU
    if lspci | grep -i amd >/dev/null 2>&1; then
        log_info "AMD GPU detected"
    fi
    
    # Detect Intel GPU
    if lspci | grep -i intel >/dev/null 2>&1; then
        log_info "Intel GPU detected"
    fi
    
    # Check available memory
    local mem_available
    mem_available=$(awk '/MemAvailable/ {print $2}' /proc/meminfo 2>/dev/null || echo "0")
    local mem_available_mb=$((mem_available / 1024))
    log_info "Available memory: ${mem_available_mb}MB"
    
    if [ "$mem_available_mb" -lt 1024 ]; then
        log_warning "Low memory detected (${mem_available_mb}MB). Consider enabling swap or closing applications."
    fi
}

# Enhanced NVIDIA configuration with automatic fixes
configure_nvidia() {
    if [ "$NVIDIA_DETECTED" = "false" ]; then
        return 0
    fi
    
    log_info "Configuring NVIDIA settings for stability"
    
    # Check for Wayland conflicts
    local gdm_conf_files=("/etc/gdm3/custom.conf" "/etc/gdm/custom.conf")
    local wayland_disabled=false
    
    for gdm_conf in "${gdm_conf_files[@]}"; do
        if [ -f "$gdm_conf" ]; then
            if grep -q "WaylandEnable=false" "$gdm_conf"; then
                wayland_disabled=true
                log_info "Wayland is disabled in $gdm_conf"
                break
            fi
        fi
    done
    
    if [ "$wayland_disabled" = "false" ]; then
        log_warning "Wayland may be enabled - this can cause NVIDIA crashes"
        log_warning "Consider disabling Wayland in GDM configuration"
    fi
    
    # Check for NVIDIA Xorg configuration
    if [ ! -f "$NVIDIA_CONFIG_FILE" ]; then
        log_warning "NVIDIA Xorg configuration not found at $NVIDIA_CONFIG_FILE"
        log_warning "This may cause display issues or crashes"
        
        # Offer to create basic configuration if running as root
        if [ "$(id -u)" = "0" ]; then
            log_info "Creating basic NVIDIA Xorg configuration"
            create_nvidia_config
        fi
    else
        log_info "NVIDIA Xorg configuration found"
        
        # Validate configuration
        if grep -q "AllowEmptyInitialConfiguration" "$NVIDIA_CONFIG_FILE"; then
            log_info "NVIDIA configuration includes AllowEmptyInitialConfiguration"
        else
            log_warning "NVIDIA configuration may be incomplete"
        fi
    fi
    
    # Set NVIDIA-specific environment variables
    export __GL_SYNC_TO_VBLANK=1
    export __GL_THREADED_OPTIMIZATIONS=1
    export NVIDIA_ALLOW_EMPTY_INITIAL_CONFIGURATION=1
    
    log_debug "NVIDIA environment variables set"
}

# Create NVIDIA Xorg configuration
create_nvidia_config() {
    log_info "Creating NVIDIA Xorg configuration"
    
    cat > "$NVIDIA_CONFIG_FILE" << 'EOF'
Section "Device"
    Identifier "NVIDIA Card"
    Driver "nvidia"
    VendorName "NVIDIA Corporation"
    Option "AllowEmptyInitialConfiguration" "true"
    Option "UseDisplayDevice" "none"
EndSection

Section "Screen"
    Identifier "Default Screen"
    Device "NVIDIA Card"
EndSection
EOF
    
    log_info "NVIDIA Xorg configuration created at $NVIDIA_CONFIG_FILE"
}

# Enhanced GNOME Session Manager registration with comprehensive retry logic
register_with_gnome_session() {
    if [ -z "${DESKTOP_AUTOSTART_ID:-}" ]; then
        log_info "No DESKTOP_AUTOSTART_ID found, running in standalone mode"
        return 0
    fi
    
    log_info "Registering with GNOME Session Manager (ID: $DESKTOP_AUTOSTART_ID)"
    
    # First check if Session Manager is available
    local session_manager_available=false
    
    if robust_dbus_call "org.gnome.SessionManager" "/org/gnome/SessionManager" \
                       "org.freedesktop.DBus.Introspectable" "Introspect"; then
        session_manager_available=true
        log_info "GNOME Session Manager is available"
    else
        log_warning "GNOME Session Manager is not available"
        
        if [ "$FALLBACK_MODE" = "false" ]; then
            log_info "Continuing without session registration (degraded mode)"
            return 0
        else
            log_error "Session Manager required but not available"
            return 1
        fi
    fi
    
    # Attempt registration if Session Manager is available
    if [ "$session_manager_available" = "true" ]; then
        if robust_dbus_call "org.gnome.SessionManager" "/org/gnome/SessionManager" \
                           "org.gnome.SessionManager" "RegisterClient" \
                           "string:$SCRIPT_NAME" "string:$DESKTOP_AUTOSTART_ID"; then
            log_info "Successfully registered with GNOME Session Manager"
            SESSION_REGISTERED=1
            return 0
        else
            log_error "Failed to register with GNOME Session Manager"
            
            if [ "$FALLBACK_MODE" = "false" ]; then
                log_info "Continuing without registration (degraded mode)"
                return 0
            else
                return 1
            fi
        fi
    fi
    
    return 1
}

# Enhanced service waiting with smart timeout and dependency checking
wait_for_gnome_services() {
    log_info "Waiting for essential GNOME services (enhanced mode)"
    
    # Skip if in fallback mode
    if [ "$FALLBACK_MODE" = "true" ]; then
        log_info "Skipping service wait in fallback mode"
        return 0
    fi
    
    # Skip if i3 is already running to avoid conflicts
    if pgrep -x "i3" >/dev/null 2>&1; then
        log_info "i3 is already running - skipping GNOME service wait"
        return 0
    fi
    
    # Essential services with priorities
    local critical_services=(
        "org.gnome.SettingsDaemon.XSettings"
        "org.gnome.SettingsDaemon.MediaKeys"
        "org.gnome.SettingsDaemon.Power"
    )
    
    local important_services=(
        "org.gnome.SettingsDaemon.Keyboard"
        "org.gnome.SettingsDaemon.Color"
        "org.gnome.SettingsDaemon.Sound"
    )
    
    local optional_services=(
        "org.gnome.SettingsDaemon.A11ySettings"
        "org.gnome.SettingsDaemon.Datetime"
        "org.gnome.SettingsDaemon.Housekeeping"
        "org.gnome.SettingsDaemon.PrintNotifications"
        "org.gnome.SettingsDaemon.Rfkill"
        "org.gnome.SettingsDaemon.ScreensaverProxy"
        "org.gnome.SettingsDaemon.Sharing"
        "org.gnome.SettingsDaemon.Smartcard"
        "org.gnome.SettingsDaemon.UsbProtection"
        "org.gnome.SettingsDaemon.Wacom"
    )
    
    local start_time
    start_time=$(date +%s)
    
    # Check critical services first (must be available)
    log_info "Checking critical services..."
    local critical_ready=0
    
    for service in "${critical_services[@]}"; do
        log_debug "Checking critical service: $service"
        if robust_dbus_call "$service" "/" "org.freedesktop.DBus.Introspectable" "Introspect"; then
            critical_ready=$((critical_ready + 1))
            log_debug "Critical service ready: $service"
        else
            log_warning "Critical service not ready: $service"
        fi
    done
    
    # Require at least 2/3 critical services
    local critical_threshold=$((${#critical_services[@]} * 2 / 3))
    if [ $critical_ready -lt $critical_threshold ]; then
        log_error "Insufficient critical services ready ($critical_ready/${#critical_services[@]})"
        log_error "Required minimum: $critical_threshold"
        
        if [ "$FALLBACK_MODE" = "false" ]; then
            log_warning "Enabling fallback mode due to service unavailability"
            FALLBACK_MODE=true
            return 0
        else
            return 1
        fi
    fi
    
    log_info "Critical services check passed ($critical_ready/${#critical_services[@]})"
    
    # Check important services (best effort)
    log_info "Checking important services..."
    local important_ready=0
    
    for service in "${important_services[@]}"; do
        if robust_dbus_call "$service" "/" "org.freedesktop.DBus.Introspectable" "Introspect"; then
            important_ready=$((important_ready + 1))
            log_debug "Important service ready: $service"
        fi
    done
    
    log_info "Important services ready: $important_ready/${#important_services[@]}"
    
    # Quick check optional services (no failures)
    local optional_ready=0
    for service in "${optional_services[@]}"; do
        if timeout 2 dbus-send --session --print-reply \
           --dest="$service" / \
           org.freedesktop.DBus.Introspectable.Introspect >/dev/null 2>&1; then
            optional_ready=$((optional_ready + 1))
        fi
    done
    
    log_info "Optional services ready: $optional_ready/${#optional_services[@]}"
    
    local end_time
    end_time=$(date +%s)
    local total_time=$((end_time - start_time))
    
    log_info "Service readiness check completed in ${total_time}s"
    SERVICES_READY=true
    return 0
}

# Emergency recovery function
emergency_recovery() {
    log_critical "Entering emergency recovery mode"
    
    # Create fallback i3 config if needed
    local i3_config="$HOME/.config/i3/config"
    local fallback_config="$FALLBACK_CONFIG_DIR/i3-config-fallback"
    
    if [ ! -f "$i3_config" ] || ! i3 -C >/dev/null 2>&1; then
        log_warning "i3 configuration invalid or missing, creating fallback"
        
        cat > "$fallback_config" << 'EOF'
# i3xGnome Emergency Fallback Configuration
set $mod Mod4

# Font for window titles
font pango:DejaVu Sans Mono 8

# Start a terminal
bindsym $mod+Return exec i3-sensible-terminal

# Kill focused window
bindsym $mod+Shift+q kill

# Start dmenu
bindsym $mod+d exec dmenu_run

# Change focus
bindsym $mod+j focus left
bindsym $mod+k focus down
bindsym $mod+l focus up
bindsym $mod+semicolon focus right

# Move focused window
bindsym $mod+Shift+j move left
bindsym $mod+Shift+k move down
bindsym $mod+Shift+l move up
bindsym $mod+Shift+semicolon move right

# Split orientation
bindsym $mod+h split h
bindsym $mod+v split v

# Fullscreen mode
bindsym $mod+f fullscreen toggle

# Restart i3
bindsym $mod+Shift+r restart

# Exit i3
bindsym $mod+Shift+e exec "i3-nagbar -t warning -m 'Exit i3?' -b 'Yes' 'i3-msg exit'"

# Status bar
bar {
    status_command i3status
}
EOF
        
        # Backup existing config and use fallback
        if [ -f "$i3_config" ]; then
            cp "$i3_config" "$i3_config.backup-$(date +%s)"
        fi
        
        mkdir -p "$(dirname "$i3_config")"
        cp "$fallback_config" "$i3_config"
        log_info "Fallback i3 configuration installed"
    fi
    
    # Try to launch i3 in minimal mode
    log_info "Attempting to launch i3 in emergency mode"
    
    # Set minimal environment
    export XDG_CURRENT_DESKTOP="i3"
    export XDG_SESSION_TYPE="${XDG_SESSION_TYPE:-x11}"
    
    # Launch i3 without GNOME integration
    if i3; then
        log_info "Emergency recovery successful - i3 started"
        return 0
    else
        log_critical "Emergency recovery failed - i3 could not start"
        return 1
    fi
}

# Enhanced cleanup with state preservation
cleanup() {
    log_info "Performing enhanced cleanup"
    
    # Save session state for debugging
    local state_file="$FALLBACK_CONFIG_DIR/last-session-state"
    cat > "$state_file" << EOF
SESSION_REGISTERED=$SESSION_REGISTERED
FALLBACK_MODE=$FALLBACK_MODE
NVIDIA_DETECTED=$NVIDIA_DETECTED
SERVICES_READY=$SERVICES_READY
TIMESTAMP=$(date)
UPTIME=$(uptime)
EOF
    
    # Send logout request to GNOME Session Manager if registered
    if [ -n "${DESKTOP_AUTOSTART_ID:-}" ] && [ "$SESSION_REGISTERED" = "1" ]; then
        log_info "Sending logout request to GNOME Session Manager"
        if ! robust_dbus_call "org.gnome.SessionManager" "/org/gnome/SessionManager" \
                             "org.gnome.SessionManager" "Logout" "uint32:1"; then
            log_warning "Failed to send logout signal to GNOME Session Manager"
        fi
    fi
    
    # Re-enable services that were disabled for performance
    gsettings set org.gnome.desktop.interface enable-animations true 2>/dev/null || true
    systemctl --user unmask tracker-extract-3.service 2>/dev/null || true
    systemctl --user unmask tracker-miner-fs-3.service 2>/dev/null || true
    
    # Kill any remaining child processes
    local children
    children=$(jobs -p 2>/dev/null || true)
    if [ -n "$children" ]; then
        log_debug "Terminating child processes: $children"
        kill $children 2>/dev/null || true
        sleep 1
        kill -9 $children 2>/dev/null || true
    fi
    
    log_info "Enhanced cleanup completed"
}

# Signal handlers
setup_signal_handlers() {
    trap cleanup EXIT
    trap 'error_exit "Received SIGINT"' INT
    trap 'error_exit "Received SIGTERM"' TERM
    trap 'error_exit "Received SIGHUP"' HUP
}

# Enhanced main function with comprehensive error handling
main() {
    local start_time
    start_time=$(date +%s)
    
    log_info "Starting i3xGnome Enhanced session (version $VERSION)"
    log_info "Process ID: $$"
    log_info "Debug mode: ${DEBUG_MODE}"
    
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --debug)
                DEBUG_MODE="true"
                log_info "Debug mode enabled via command line"
                ;;
            --fallback)
                FALLBACK_MODE="true"
                log_info "Fallback mode enabled via command line"
                ;;
            --help)
                show_help
                exit 0
                ;;
            *)
                log_error "Unknown option: $1"
                exit 1
                ;;
        esac
        shift
    done
    
    # Setup signal handlers
    setup_signal_handlers
    
    # Comprehensive system analysis
    detect_hardware
    configure_nvidia
    
    # Environment validation with fallback
    if ! validate_environment; then
        if [ "$FALLBACK_MODE" = "false" ]; then
            log_warning "Environment validation failed, enabling fallback mode"
            FALLBACK_MODE=true
        else
            error_exit "Environment validation failed even in fallback mode"
        fi
    fi
    
    # GNOME Session registration
    register_with_gnome_session || log_warning "Session registration failed"
    
    # Service readiness check
    wait_for_gnome_services || log_warning "Service readiness check failed"
    
    # Launch i3 with comprehensive error handling
    log_info "Launching i3 window manager"
    
    if [ "$FALLBACK_MODE" = "true" ]; then
        log_info "Running in fallback mode"
        emergency_recovery
    else
        # Validate i3 configuration
        if ! i3 -C >/dev/null 2>&1; then
            log_error "i3 configuration is invalid"
            error_exit "i3 configuration validation failed"
        fi
        
        # Launch i3
        if ! i3; then
            local exit_code=$?
            log_error "i3 exited with code $exit_code"
            error_exit "i3 launch failed"
        fi
    fi
    
    local end_time
    end_time=$(date +%s)
    local total_time=$((end_time - start_time))
    
    log_info "i3xGnome Enhanced session completed in ${total_time} seconds"
    log_info "Session statistics: NVIDIA=$NVIDIA_DETECTED, Fallback=$FALLBACK_MODE, Services=$SERVICES_READY"
}

# Enhanced environment validation
validate_environment() {
    log_info "Performing enhanced environment validation"
    
    # Check graphical session
    if [ -z "${DISPLAY:-}" ] && [ -z "${WAYLAND_DISPLAY:-}" ]; then
        log_error "No graphical display detected"
        return 1
    fi
    
    # Check D-Bus session with retry
    if [ -z "${DBUS_SESSION_BUS_ADDRESS:-}" ]; then
        log_error "D-Bus session bus not available"
        return 1
    fi
    
    # Test D-Bus connectivity with robust call
    if ! robust_dbus_call "org.freedesktop.DBus" "/org/freedesktop/DBus" \
                         "org.freedesktop.DBus" "ListNames"; then
        log_error "D-Bus session bus is not responding"
        return 1
    fi
    
    log_info "Environment validation passed"
    return 0
}

# Show help
show_help() {
    cat << EOF
i3xGnome Enhanced - Ultra-robust i3 integration with GNOME (v$VERSION)

USAGE:
    $SCRIPT_NAME [OPTIONS]

OPTIONS:
    --debug     Enable debug mode with verbose logging
    --fallback  Start in fallback mode (minimal GNOME integration)
    --help      Show this help message

DESCRIPTION:
    Enhanced version of i3xGnome with comprehensive crash prevention:
    
    - Robust D-Bus handling with exponential backoff retry
    - Automatic NVIDIA configuration and workarounds
    - Emergency fallback mode for recovery
    - Comprehensive hardware detection
    - Enhanced service dependency management
    - State preservation and debugging support

ENVIRONMENT VARIABLES:
    DEBUG_MODE          Enable debug mode
    STARTUP_TIMEOUT     Service startup timeout (default: 30s)
    DBUS_MAX_TIMEOUT    Maximum D-Bus operation timeout (default: 20s)

EXAMPLES:
    $SCRIPT_NAME                    # Normal startup
    $SCRIPT_NAME --debug           # Debug mode
    $SCRIPT_NAME --fallback        # Fallback mode
    DEBUG_MODE=true $SCRIPT_NAME   # Debug via environment

For troubleshooting, check the log file at: $LOG_FILE
EOF
}

# Debug check and environment setup  
if [ "${DEBUG:-0}" = "1" ] || [ "${DEBUG_MODE}" = "true" ]; then
    DEBUG_MODE="true"
fi

# Run the main function
main "$@" 