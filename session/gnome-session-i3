#!/usr/bin/env bash
#
# gnome-session-i3 - Robust GNOME Session launcher with i3 window manager
#
# This script starts a GNOME session with i3 as the window manager,
# ensuring compatibility with different versions of gnome-session and
# providing comprehensive error handling and crash prevention.
#

set -euo pipefail

# Script version
VERSION="1.3.0"

# Configuration
readonly SCRIPT_NAME="gnome-session-i3"
readonly LOG_PREFIX="[$SCRIPT_NAME]"
readonly SESSION_NAME="i3-gnome"
readonly STARTUP_TIMEOUT=60
readonly MAX_RETRIES=3

# Logging functions
log() {
    echo "$LOG_PREFIX $1" >&2
    logger -t "$SCRIPT_NAME" "$1" 2>/dev/null || true
}

log_info() {
    log "INFO: $1"
}

log_warning() {
    log "WARNING: $1"
}

log_error() {
    log "ERROR: $1"
}

log_debug() {
    if [ "${DEBUG:-0}" = "1" ]; then
        log "DEBUG: $1"
    fi
}

# Error handling
error_exit() {
    log_error "$1"
    cleanup
    exit 1
}

# Signal handlers
cleanup() {
    log_info "Performing cleanup"
    
    # Kill any remaining child processes
    local children
    children=$(jobs -p 2>/dev/null || true)
    if [ -n "$children" ]; then
        log_debug "Terminating child processes: $children"
        kill $children 2>/dev/null || true
        sleep 1
        kill -9 $children 2>/dev/null || true
    fi
}

# Set up signal handlers
trap cleanup EXIT
trap 'error_exit "Received SIGINT"' INT
trap 'error_exit "Received SIGTERM"' TERM

# Function to check dependencies
check_dependencies() {
    log_info "Checking dependencies"
    
    if ! command -v gnome-session >/dev/null 2>&1; then
        error_exit "gnome-session command not found. Install with: sudo apt install gnome-session"
    fi
    
    if ! command -v i3 >/dev/null 2>&1; then
        error_exit "i3 command not found. Install with: sudo apt install i3"
    fi
    
    log_debug "All dependencies found"
}

# Function to validate environment
validate_environment() {
    log_info "Validating environment"
    
    # Check if we're in a graphical session
    if [ -z "${DISPLAY:-}" ] && [ -z "${WAYLAND_DISPLAY:-}" ]; then
        error_exit "No graphical display detected"
    fi
    
    # Check D-Bus session
    if [ -z "${DBUS_SESSION_BUS_ADDRESS:-}" ]; then
        error_exit "D-Bus session bus not available"
    fi
    
    log_debug "Environment validation passed"
}

# Function to determine gnome-session version and compatibility
check_gnome_session_version() {
    log_info "Checking GNOME Session compatibility"
    
    local gnome_version
    # Try gnome-shell first, then gnome-session
    gnome_version=$(gnome-shell --version 2>/dev/null | grep -oP '\d+\.\d+' | head -1 || \
                    gnome-session --version 2>/dev/null | grep -oP '\d+\.\d+' | head -1 || \
                    echo "unknown")
    
    if [ "$gnome_version" = "unknown" ]; then
        log_warning "Could not determine GNOME Session version - proceeding anyway"
        return 0
    fi
    
    log_info "Detected GNOME version: $gnome_version"
    
    # Check version compatibility
    local major_version
    major_version=$(echo "$gnome_version" | cut -d. -f1)
    
    if [ "$major_version" -ge 40 ]; then
        log_debug "GNOME version is compatible (40+)"
    elif [ "$major_version" -ge 3 ]; then
        local minor_version
        minor_version=$(echo "$gnome_version" | cut -d. -f2)
        if [ "$minor_version" -ge 36 ]; then
            log_debug "GNOME version is compatible (3.36+)"
        else
            log_warning "GNOME version may have compatibility issues (requires 3.36+)"
        fi
    else
        error_exit "GNOME version is too old (requires 3.36+)"
    fi
    
    return 0
}

# Function to check session file
check_session_file() {
    log_info "Checking session file"
    
    local session_file="/usr/share/gnome-session/sessions/${SESSION_NAME}.session"
    
    if [ ! -f "$session_file" ]; then
        error_exit "Session file not found: $session_file. Please ensure i3xGnome is properly installed."
    fi
    
    # Validate session file content
    if ! grep -q "RequiredComponents" "$session_file"; then
        log_warning "Session file may be malformed (missing RequiredComponents)"
    fi
    
    if ! grep -q "i3-gnome" "$session_file"; then
        log_warning "Session file may be malformed (missing i3-gnome component)"
    fi
    
    log_debug "Session file validation passed"
}

# Function to set up environment variables
setup_environment() {
    log_info "Setting up environment"
    
    # Set desktop environment
    export XDG_CURRENT_DESKTOP="GNOME"
    export XDG_SESSION_DESKTOP="gnome"
    
    # Set session class
    export XDG_SESSION_CLASS="${XDG_SESSION_CLASS:-user}"
    
    # Set session type
    if [ -n "${DISPLAY:-}" ]; then
        export XDG_SESSION_TYPE="${XDG_SESSION_TYPE:-x11}"
    elif [ -n "${WAYLAND_DISPLAY:-}" ]; then
        export XDG_SESSION_TYPE="${XDG_SESSION_TYPE:-wayland}"
        log_warning "Wayland detected - i3 may not work properly"
    fi
    
    # Set additional environment variables for GNOME compatibility
    export GNOME_DESKTOP_SESSION_ID="${GNOME_DESKTOP_SESSION_ID:-this-is-deprecated}"
    export XDG_MENU_PREFIX="${XDG_MENU_PREFIX:-gnome-}"
    
    # Ensure proper paths
    export PATH="/usr/local/bin:/usr/bin:/bin:$PATH"
    
    log_debug "Environment setup completed"
    log_debug "XDG_CURRENT_DESKTOP=$XDG_CURRENT_DESKTOP"
    log_debug "XDG_SESSION_TYPE=$XDG_SESSION_TYPE"
    log_debug "XDG_SESSION_CLASS=$XDG_SESSION_CLASS"
}

# Function to check for conflicting processes
check_conflicting_processes() {
    log_info "Checking for conflicting processes"
    
    # Check for existing window managers
    local wm_processes=("mutter" "kwin" "openbox" "fluxbox" "awesome")
    local conflicts=()
    
    for wm in "${wm_processes[@]}"; do
        if pgrep -x "$wm" >/dev/null 2>&1; then
            conflicts+=("$wm")
        fi
    done
    
    if [ ${#conflicts[@]} -gt 0 ]; then
        log_warning "Conflicting window managers detected: ${conflicts[*]}"
        log_warning "These may interfere with i3 operation"
    fi
    
    # Check for existing GNOME Shell
    if pgrep -x "gnome-shell" >/dev/null 2>&1; then
        log_warning "GNOME Shell is running - this may cause conflicts with i3"
    fi
    
    log_debug "Conflict check completed"
}

# Function to wait for D-Bus services
wait_for_dbus_services() {
    log_info "Waiting for D-Bus services"
    
    local services=("org.freedesktop.DBus" "org.freedesktop.login1")
    local timeout=30
    local start_time
    start_time=$(date +%s)
    
    for service in "${services[@]}"; do
        log_debug "Waiting for D-Bus service: $service"
        
        while true; do
            if dbus-send --session --print-reply \
                --dest="$service" / \
                org.freedesktop.DBus.Introspectable.Introspect >/dev/null 2>&1; then
                log_debug "D-Bus service $service is ready"
                break
            fi
            
            local current_time
            current_time=$(date +%s)
            local elapsed=$((current_time - start_time))
            
            if [ $elapsed -ge $timeout ]; then
                log_warning "Timeout waiting for D-Bus service $service"
                break
            fi
            
            sleep 1
        done
    done
    
    log_debug "D-Bus services check completed"
}

# Function to perform pre-flight checks
preflight_checks() {
    log_info "Performing pre-flight checks"
    
    # Check for NVIDIA-specific issues
    if lspci | grep -i nvidia >/dev/null 2>&1; then
        log_debug "NVIDIA GPU detected"
        
        # Check for Wayland in GDM (common crash cause)
        local gdm_conf="/etc/gdm3/custom.conf"
        [ ! -f "$gdm_conf" ] && gdm_conf="/etc/gdm/custom.conf"
        
        if [ -f "$gdm_conf" ] && ! grep -q "WaylandEnable=false" "$gdm_conf"; then
            log_warning "Wayland may be enabled in GDM - this can cause NVIDIA crashes"
        fi
        
        # Check for NVIDIA Xorg configuration
        if [ ! -f "/etc/X11/xorg.conf.d/20-nvidia.conf" ]; then
            log_warning "NVIDIA Xorg configuration not found - may cause instability"
        fi
    fi
    
    # Check available memory
    local mem_available
    mem_available=$(awk '/MemAvailable/ {print $2}' /proc/meminfo 2>/dev/null || echo "0")
    local mem_available_mb=$((mem_available / 1024))
    
    if [ "$mem_available_mb" -lt 512 ]; then
        log_warning "Low available memory: ${mem_available_mb}MB (recommended: 1GB+)"
    fi
    
    log_debug "Pre-flight checks completed"
}

# Function to start GNOME session with retry logic
start_session() {
    log_info "Starting GNOME session with i3 window manager"
    
    local retries=0
    local session_args=("--session=$SESSION_NAME")
    
    # Add debug flag if enabled
    if [ "${DEBUG:-0}" = "1" ]; then
        session_args+=("--debug")
    fi
    
    # Add any additional arguments passed to this script
    session_args+=("$@")
    
    while [ $retries -lt $MAX_RETRIES ]; do
        log_info "Starting gnome-session (attempt $((retries + 1))/$MAX_RETRIES)"
        log_debug "Command: gnome-session ${session_args[*]}"
        
        # Start gnome-session
        if exec gnome-session "${session_args[@]}"; then
            log_info "GNOME session started successfully"
            return 0
        else
            local exit_code=$?
            retries=$((retries + 1))
            log_error "gnome-session failed with exit code $exit_code (attempt $retries/$MAX_RETRIES)"
            
            if [ $retries -lt $MAX_RETRIES ]; then
                log_info "Retrying in 3 seconds..."
                sleep 3
            fi
        fi
    done
    
    error_exit "Failed to start gnome-session after $MAX_RETRIES attempts"
}

# Main process
main() {
    log_info "Initializing $SCRIPT_NAME version $VERSION"
    
    # Perform all checks and setup
    preflight_checks
    check_dependencies
    validate_environment
    check_gnome_session_version
    check_session_file
    setup_environment
    check_conflicting_processes
    wait_for_dbus_services
    
    # Start the session
    start_session "$@"
}

# Enable debug mode if requested
if [ "${1:-}" = "--debug" ] || [ "${DEBUG:-0}" = "1" ]; then
    export DEBUG=1
    log_info "Debug mode enabled"
    # Remove --debug from arguments to avoid passing it to gnome-session
    if [ "${1:-}" = "--debug" ]; then
        shift
    fi
fi

# Run the main function
main "$@"
