#!/bin/bash
#
# i3xGnome - Robust launcher script for i3 with GNOME Session integration
# 
# This script registers i3 with the GNOME Session Manager and then
# launches i3 window manager. It includes comprehensive error handling,
# timeout management, and crash prevention mechanisms.
#

set -euo pipefail

# Script configuration
SCRIPT_NAME="i3-gnome"
VERSION="2.0.0-optimized"
LOG_FILE="${XDG_CACHE_HOME:-$HOME/.cache}/i3-gnome.log"
STARTUP_TIMEOUT="${STARTUP_TIMEOUT:-15}"
DEBUG_MODE="${DEBUG_MODE:-false}"

# Ensure log directory exists
mkdir -p "$(dirname "$LOG_FILE")"

# Initialize debug mode from environment if not set
if [ "${DEBUG:-0}" = "1" ] || [ "${DEBUG_MODE}" = "true" ]; then
    DEBUG_MODE="true"
fi

# Function to load performance configuration
load_performance_config() {
    local config_file="${XDG_CONFIG_HOME:-$HOME/.config}/i3-gnome/performance.conf"
    local system_config="/etc/i3-gnome/performance.conf"
    
    # Load system-wide config first
    if [ -f "$system_config" ]; then
        log_debug "Loading system performance config: $system_config"
        # shellcheck source=/dev/null
        source "$system_config"
    fi
    
    # Load user config (overrides system config)
    if [ -f "$config_file" ]; then
        log_debug "Loading user performance config: $config_file"
        # shellcheck source=/dev/null
        source "$config_file"
    else
        log_debug "No user performance config found at $config_file"
        log_debug "Using default performance settings"
    fi
    
    # Apply loaded configuration (variables are already set by sourcing)
    log_debug "Applied configuration: STARTUP_TIMEOUT=${STARTUP_TIMEOUT}, DBUS_TIMEOUT=${DBUS_TIMEOUT}"
    
    log_debug "Performance configuration loaded"
}

# Configuration
readonly LOG_PREFIX="[$SCRIPT_NAME]"
DBUS_TIMEOUT=10
MAX_RETRIES=3

# Logging functions
log() {
    echo "$LOG_PREFIX $1" >&2
    logger -t "$SCRIPT_NAME" "$1" 2>/dev/null || true
}

log_info() {
    log "INFO: $1"
}

log_warning() {
    log "WARNING: $1"
}

log_error() {
    log "ERROR: $1"
}

log_debug() {
    if [ "${DEBUG:-0}" = "1" ] || [ "${DEBUG_MODE}" = "true" ]; then
        log "DEBUG: $1"
    fi
}

# Load performance configuration after logging functions are defined
load_performance_config

# Error handling
error_exit() {
    log_error "$1"
    cleanup
    exit 1
}

# Signal handlers
cleanup() {
    log_info "Performing cleanup"
    
    # Send logout request to GNOME Session Manager if registered
    if [ -n "${DESKTOP_AUTOSTART_ID:-}" ] && [ "${SESSION_REGISTERED:-0}" = "1" ]; then
        log_info "Sending logout request to GNOME Session Manager"
        if ! timeout "$DBUS_TIMEOUT" dbus-send --print-reply --session \
            --dest=org.gnome.SessionManager \
            "/org/gnome/SessionManager" \
            "org.gnome.SessionManager.Logout" "uint32:1" 2>/dev/null; then
            log_warning "Failed to send logout signal to GNOME Session Manager"
        fi
    fi
    
    # Kill any remaining child processes
    local children
    children=$(jobs -p 2>/dev/null || true)
    if [ -n "$children" ]; then
        log_debug "Terminating child processes: $children"
        kill $children 2>/dev/null || true
        sleep 1
        kill -9 $children 2>/dev/null || true
    fi
}

# Set up signal handlers
trap cleanup EXIT
trap 'error_exit "Received SIGINT"' INT
trap 'error_exit "Received SIGTERM"' TERM

# Function to check for dependencies with detailed error messages
check_dependencies() {
    log_info "Checking dependencies"
    
    local missing_deps=()
    local deps=("i3" "dbus-send" "xrdb" "gnome-session")
    
    # Check basic dependencies
    for cmd in "${deps[@]}"; do
        if ! command -v "$cmd" >/dev/null 2>&1; then
            missing_deps+=("$cmd")
        fi
    done
    
    # Check for GNOME Settings Daemon (modern GNOME uses gsd-* components)
    if ! command -v gnome-settings-daemon >/dev/null 2>&1; then
        # Check for modern gsd components
        if ! find /usr/libexec -name "gsd-*" -type f -executable 2>/dev/null | head -1 | grep -q .; then
            missing_deps+=("gnome-settings-daemon")
        else
            log_debug "Found modern GNOME settings daemon components (gsd-*)"
        fi
    else
        log_debug "Found legacy gnome-settings-daemon binary"
    fi
    
    if [ ${#missing_deps[@]} -gt 0 ]; then
        error_exit "Missing required dependencies: ${missing_deps[*]}. Install with: sudo apt install ${missing_deps[*]}"
    fi
    
    log_debug "All dependencies found"
}

# Function to validate environment
validate_environment() {
    log_info "Validating environment"
    
    # Check if we're in a graphical session
    if [ -z "${DISPLAY:-}" ] && [ -z "${WAYLAND_DISPLAY:-}" ]; then
        error_exit "No graphical display detected (DISPLAY and WAYLAND_DISPLAY are unset)"
    fi
    
    # Check D-Bus session
    if [ -z "${DBUS_SESSION_BUS_ADDRESS:-}" ]; then
        error_exit "D-Bus session bus not available (DBUS_SESSION_BUS_ADDRESS is unset)"
    fi
    
    # Test D-Bus connectivity
    if ! timeout "$DBUS_TIMEOUT" dbus-send --session --print-reply \
        --dest=org.freedesktop.DBus /org/freedesktop/DBus \
        org.freedesktop.DBus.ListNames >/dev/null 2>&1; then
        error_exit "D-Bus session bus is not responding"
    fi
    
    log_debug "Environment validation passed"
}

# Function to check if GNOME Session Manager is available
check_gnome_session_manager() {
    log_info "Checking GNOME Session Manager availability"
    
    local retries=0
    while [ $retries -lt $MAX_RETRIES ]; do
        if timeout "$DBUS_TIMEOUT" dbus-send --session --print-reply \
            --dest=org.gnome.SessionManager /org/gnome/SessionManager \
            org.freedesktop.DBus.Introspectable.Introspect >/dev/null 2>&1; then
            log_debug "GNOME Session Manager is available"
            return 0
        fi
        
        retries=$((retries + 1))
        log_warning "GNOME Session Manager not available (attempt $retries/$MAX_RETRIES)"
        
        if [ $retries -lt $MAX_RETRIES ]; then
            sleep 2
        fi
    done
    
    log_warning "GNOME Session Manager is not available after $MAX_RETRIES attempts"
    return 1
}

# Function to register with GNOME Session Manager with retry logic
register_with_gnome_session() {
    if [ -z "${DESKTOP_AUTOSTART_ID:-}" ]; then
        log_info "No DESKTOP_AUTOSTART_ID found, running in standalone mode"
        return 0
    fi
    
    log_info "Registering with GNOME Session Manager (ID: $DESKTOP_AUTOSTART_ID)"
    
    # Check if Session Manager is available first
    if ! check_gnome_session_manager; then
        log_warning "Cannot register with GNOME Session Manager - service not available"
        return 1
    fi
    
    local retries=0
    while [ $retries -lt $MAX_RETRIES ]; do
        if timeout "$DBUS_TIMEOUT" dbus-send --print-reply --session \
            --dest=org.gnome.SessionManager \
            "/org/gnome/SessionManager" \
            "org.gnome.SessionManager.RegisterClient" \
            "string:$SCRIPT_NAME" "string:$DESKTOP_AUTOSTART_ID" >/dev/null 2>&1; then
            log_info "Successfully registered with GNOME Session Manager"
            SESSION_REGISTERED=1
            return 0
        fi
        
        retries=$((retries + 1))
        log_warning "Failed to register with GNOME Session Manager (attempt $retries/$MAX_RETRIES)"
        
        if [ $retries -lt $MAX_RETRIES ]; then
            sleep 1
        fi
    done
    
    log_error "Failed to register with GNOME Session Manager after $MAX_RETRIES attempts"
    return 1
}

# Function to load X resources safely
load_xresources() {
    local xresources_file="$HOME/.Xresources"
    
    if [ -f "$xresources_file" ]; then
        log_info "Loading X resources from $xresources_file"
        if ! xrdb -merge "$xresources_file" 2>/dev/null; then
            log_warning "Failed to load X resources from $xresources_file"
        else
            log_debug "X resources loaded successfully"
        fi
    else
        log_debug "No X resources file found at $xresources_file"
    fi
}

# Function to set up environment variables
setup_environment() {
    log_info "Setting up environment"
    
    # Ensure XDG_CURRENT_DESKTOP is set for proper integration
    export XDG_CURRENT_DESKTOP="${XDG_CURRENT_DESKTOP:-GNOME}"
    
    # Set session class if not already set
    export XDG_SESSION_CLASS="${XDG_SESSION_CLASS:-user}"
    
    # Ensure proper session type
    if [ -n "${DISPLAY:-}" ]; then
        export XDG_SESSION_TYPE="${XDG_SESSION_TYPE:-x11}"
    elif [ -n "${WAYLAND_DISPLAY:-}" ]; then
        export XDG_SESSION_TYPE="${XDG_SESSION_TYPE:-wayland}"
    fi
    
    log_debug "Environment setup completed"
    log_debug "XDG_CURRENT_DESKTOP=$XDG_CURRENT_DESKTOP"
    log_debug "XDG_SESSION_TYPE=$XDG_SESSION_TYPE"
    log_debug "XDG_SESSION_CLASS=$XDG_SESSION_CLASS"
}

# Function to wait for GNOME services to be ready with async operations
wait_for_gnome_services() {
    log_info "Waiting for GNOME services to be ready (async mode)"
    
    # Skip if i3 is already running to avoid conflicts
    if check_i3_running; then
        log_info "i3 is already running - skipping GNOME service wait"
        return 0
    fi
    
    local services=(
        "org.gnome.SettingsDaemon.A11ySettings"
        "org.gnome.SettingsDaemon.Color"
        "org.gnome.SettingsDaemon.Datetime"
        "org.gnome.SettingsDaemon.Housekeeping"
        "org.gnome.SettingsDaemon.Keyboard"
        "org.gnome.SettingsDaemon.MediaKeys"
        "org.gnome.SettingsDaemon.Power"
        "org.gnome.SettingsDaemon.PrintNotifications"
        "org.gnome.SettingsDaemon.Rfkill"
        "org.gnome.SettingsDaemon.ScreensaverProxy"
        "org.gnome.SettingsDaemon.Sharing"
        "org.gnome.SettingsDaemon.Smartcard"
        "org.gnome.SettingsDaemon.Sound"
        "org.gnome.SettingsDaemon.UsbProtection"
        "org.gnome.SettingsDaemon.Wacom"
        "org.gnome.SettingsDaemon.XSettings"
    )
    
    local timeout=15  # Reduced timeout for faster startup
    local start_time
    start_time=$(date +%s)
    local ready_services=0
    local total_services=${#services[@]}
    
    log_debug "Checking $total_services GNOME services with $timeout second timeout"
    
    # Use async approach - check all services in parallel
    local temp_dir="/tmp/i3-gnome-$$"
    mkdir -p "$temp_dir"
    
    # Start async checks for all services
    for i in "${!services[@]}"; do
        local service="${services[$i]}"
        (
            if timeout 3 dbus-send --session --print-reply \
                --dest="$service" / \
                org.freedesktop.DBus.Introspectable.Introspect >/dev/null 2>&1; then
                echo "ready" > "$temp_dir/service_$i"
            else
                echo "failed" > "$temp_dir/service_$i"
            fi
        ) &
    done
    
    # Wait for results with timeout
    while true; do
        local current_time
        current_time=$(date +%s)
        local elapsed=$((current_time - start_time))
        
        if [ $elapsed -ge $timeout ]; then
            log_warning "Timeout waiting for GNOME services after ${timeout}s"
            break
        fi
        
        # Count ready services
        ready_services=0
        for i in "${!services[@]}"; do
            if [ -f "$temp_dir/service_$i" ]; then
                if [ "$(cat "$temp_dir/service_$i" 2>/dev/null)" = "ready" ]; then
                    ready_services=$((ready_services + 1))
                fi
            fi
        done
        
        # Check if we have enough services ready (75% threshold for performance)
        local threshold=$((total_services * 3 / 4))
        if [ $ready_services -ge $threshold ]; then
            log_info "Sufficient GNOME services ready ($ready_services/$total_services)"
            break
        fi
        
        sleep 0.1  # Short sleep for responsiveness
    done
    
    # Cleanup
    rm -rf "$temp_dir" 2>/dev/null
    wait  # Wait for background processes to finish
    
    log_debug "GNOME services check completed: $ready_services/$total_services ready"
    return 0
}

# Function to optimize D-Bus environment for performance
optimize_dbus_environment() {
    log_info "Optimizing D-Bus environment for performance"
    
    # Set D-Bus performance optimizations
    export DBUS_SESSION_BUS_ADDRESS="${DBUS_SESSION_BUS_ADDRESS:-unix:path=/run/user/$(id -u)/bus}"
    
    # Enable D-Bus async operations
    export DBUS_ENABLE_ASYNC="1"
    
    # Optimize GLib main loop for better performance
    export G_MAIN_CONTEXT_THREAD_POOL_SIZE="4"
    
    # Enable frame pointer optimizations if available
    if [ -f /proc/sys/kernel/perf_event_paranoid ]; then
        export GNOME_ENABLE_FRAME_POINTERS="1"
    fi
    
    # Set optimal GDK backend
    if [ "$XDG_SESSION_TYPE" = "wayland" ]; then
        export GDK_BACKEND="wayland,x11"
    else
        export GDK_BACKEND="x11"
    fi
    
    log_debug "D-Bus environment optimized"
}

# Function to start GNOME services asynchronously
start_gnome_services_async() {
    log_info "Starting essential GNOME services asynchronously"
    
    # Start services that can run in parallel
    local services=(
        "gnome-keyring-daemon --start --components=secrets,ssh,pkcs11"
        "gnome-settings-daemon"
        "/usr/libexec/gsd-xsettings"
        "/usr/libexec/gsd-a11y-settings"
        "/usr/libexec/gsd-clipboard"
        "/usr/libexec/gsd-color"
        "/usr/libexec/gsd-datetime"
        "/usr/libexec/gsd-housekeeping"
        "/usr/libexec/gsd-keyboard"
        "/usr/libexec/gsd-media-keys"
        "/usr/libexec/gsd-power"
        "/usr/libexec/gsd-print-notifications"
        "/usr/libexec/gsd-rfkill"
        "/usr/libexec/gsd-screensaver-proxy"
        "/usr/libexec/gsd-sharing"
        "/usr/libexec/gsd-smartcard"
        "/usr/libexec/gsd-sound"
        "/usr/libexec/gsd-usb-protection"
        "/usr/libexec/gsd-wacom"
    )
    
    for service in "${services[@]}"; do
        if command -v "${service%% *}" >/dev/null 2>&1; then
            log_debug "Starting service: $service"
            $service &
        fi
    done
    
    log_debug "GNOME services started asynchronously"
}

# Function to preload commonly used libraries for performance
preload_libraries() {
    log_info "Preloading commonly used libraries"
    
    # Common GNOME libraries that benefit from preloading
    local libs=(
        "libgtk-3.so.0"
        "libglib-2.0.so.0"
        "libgobject-2.0.so.0"
        "libgio-2.0.so.0"
        "libgdk-3.so.0"
        "libpango-1.0.so.0"
        "libcairo.so.2"
        "libgdk_pixbuf-2.0.so.0"
    )
    
    # Use LD_PRELOAD for performance if libraries exist
    local preload_libs=""
    for lib in "${libs[@]}"; do
        if ldconfig -p | grep -q "$lib"; then
            if [ -n "$preload_libs" ]; then
                preload_libs="$preload_libs:$lib"
            else
                preload_libs="$lib"
            fi
        fi
    done
    
    if [ -n "$preload_libs" ]; then
        export LD_PRELOAD="$preload_libs"
        log_debug "Preloaded libraries: $preload_libs"
    fi
}

# Function to optimize system for GNOME performance
optimize_system_performance() {
    log_info "Applying system performance optimizations"
    
    # Set CPU governor to performance if available and on AC power
    if [ -f /sys/class/power_supply/ADP*/online ] && 
       [ "$(cat /sys/class/power_supply/ADP*/online 2>/dev/null)" = "1" ]; then
        if command -v cpupower >/dev/null 2>&1; then
            log_debug "Setting CPU governor to performance (AC power detected)"
            cpupower frequency-set -g performance >/dev/null 2>&1 || true
        fi
    fi
    
    # Optimize I/O scheduler for desktop workloads (requires root)
    if [ "$(id -u)" = "0" ]; then
        for disk in /sys/block/sd* /sys/block/nvme*; do
            if [ -f "$disk/queue/scheduler" ]; then
                # Use mq-deadline for better desktop responsiveness
                echo "mq-deadline" > "$disk/queue/scheduler" 2>/dev/null || true
            fi
        done
    else
        log_debug "Skipping I/O scheduler optimization (requires root)"
    fi
    
    # Set optimal swappiness for desktop
    if [ -w /proc/sys/vm/swappiness ]; then
        echo "10" > /proc/sys/vm/swappiness 2>/dev/null || true
    fi
    
    # Enable transparent huge pages for better memory performance
    if [ -w /sys/kernel/mm/transparent_hugepage/enabled ]; then
        echo "madvise" > /sys/kernel/mm/transparent_hugepage/enabled 2>/dev/null || true
    fi
    
    log_debug "System performance optimizations applied"
}

# Function to setup performance monitoring
setup_performance_monitoring() {
    if [ "$DEBUG_MODE" = "true" ]; then
        log_info "Setting up performance monitoring"
        
        # Enable Sysprof marks if available
        export SYSPROF_TRACE_FD="${SYSPROF_TRACE_FD:-}"
        
        # Enable GTK performance debugging
        export GTK_DEBUG="${GTK_DEBUG:-}"
        export GSK_DEBUG="${GSK_DEBUG:-}"
        
        # Enable frame timing
        export MUTTER_DEBUG_ENABLE_FRAME_TIMINGS="1"
        
        log_debug "Performance monitoring enabled"
    fi
}

# Function to apply GNOME-specific optimizations
apply_gnome_optimizations() {
    log_info "Applying GNOME-specific optimizations"
    
    # Disable unnecessary animations for faster startup
    gsettings set org.gnome.desktop.interface enable-animations false 2>/dev/null || true
    
    # Optimize font rendering
    gsettings set org.gnome.desktop.interface font-antialiasing 'rgba' 2>/dev/null || true
    gsettings set org.gnome.desktop.interface font-hinting 'slight' 2>/dev/null || true
    
    # Disable tracker indexing during startup for performance
    systemctl --user mask tracker-extract-3.service 2>/dev/null || true
    systemctl --user mask tracker-miner-fs-3.service 2>/dev/null || true
    
    # Enable triple buffering if on Ubuntu/supported system
    if command -v lsb_release >/dev/null 2>&1; then
        local distro
        distro=$(lsb_release -si 2>/dev/null)
        if [ "$distro" = "Ubuntu" ]; then
            export MUTTER_DEBUG_ENABLE_TRIPLE_BUFFERING="1"
            log_debug "Triple buffering enabled for Ubuntu"
        fi
    fi
    
    # Optimize for Wayland if available
    if [ "$XDG_SESSION_TYPE" = "wayland" ]; then
        export MOZ_ENABLE_WAYLAND="1"
        export QT_QPA_PLATFORM="wayland;xcb"
        log_debug "Wayland optimizations applied"
    fi
    
    log_debug "GNOME optimizations applied"
}

# Function to check if i3 is already running
check_i3_running() {
    if pgrep -x "i3" >/dev/null 2>&1; then
        log_warning "i3 is already running"
        return 0
    fi
    return 1
}

# Function to launch i3 with proper error handling
launch_i3() {
    log_info "Launching i3 window manager"
    
    # Check if i3 is already running
    if check_i3_running; then
        log_info "i3 is already running - reloading configuration instead"
        if i3-msg reload >/dev/null 2>&1; then
            log_info "i3 configuration reloaded successfully"
            return 0
        else
            log_warning "Failed to reload i3 configuration - continuing with existing instance"
            return 0
        fi
    fi
    
    # Create i3 config directory if it doesn't exist
    local i3_config_dir="$HOME/.config/i3"
    if [ ! -d "$i3_config_dir" ]; then
        log_info "Creating i3 config directory: $i3_config_dir"
        mkdir -p "$i3_config_dir"
    fi
    
    # Validate i3 configuration before starting
    if ! i3 -C >/dev/null 2>&1; then
        log_error "i3 configuration is invalid - please check your config file"
        log_error "Run 'i3 -C' to see configuration errors"
        return 1
    fi
    
    # Launch i3 with error handling
    local i3_exit_code=0
    if ! i3; then
        i3_exit_code=$?
        log_error "i3 exited with code $i3_exit_code"
        
        # Check for common i3 issues
        if [ $i3_exit_code -eq 1 ]; then
            log_error "i3 configuration error - check your i3 config file"
        elif [ $i3_exit_code -eq 2 ]; then
            log_error "i3 could not connect to X server"
        fi
        
        return $i3_exit_code
    fi
    
    log_info "i3 window manager exited normally"
    return 0
}

# Function to perform pre-flight checks
preflight_checks() {
    log_info "Performing pre-flight checks"
    
    # Check dependencies first
    check_dependencies
    
    # Check if we're running in a supported environment
    case "${XDG_SESSION_TYPE:-}" in
        "x11"|"")
            log_debug "Running in X11 session"
            ;;
        "wayland")
            log_warning "Running in Wayland session - i3 may not work properly"
            ;;
        *)
            log_warning "Unknown session type: ${XDG_SESSION_TYPE:-unknown}"
            ;;
    esac
    
    # Check for NVIDIA-specific issues
    if lspci | grep -i nvidia >/dev/null 2>&1; then
        log_debug "NVIDIA GPU detected"
        
        # Check for common NVIDIA configuration issues
        if [ ! -f "/etc/X11/xorg.conf.d/20-nvidia.conf" ]; then
            log_warning "NVIDIA Xorg configuration not found - this may cause crashes"
            log_warning "Consider creating /etc/X11/xorg.conf.d/20-nvidia.conf"
        fi
        
        # Check if Wayland is disabled in GDM (common crash cause)
        local gdm_conf="/etc/gdm3/custom.conf"
        [ ! -f "$gdm_conf" ] && gdm_conf="/etc/gdm/custom.conf"
        
        if [ -f "$gdm_conf" ] && ! grep -q "WaylandEnable=false" "$gdm_conf"; then
            log_warning "Wayland may be enabled in GDM - this can cause NVIDIA crashes"
            log_warning "Consider disabling Wayland in $gdm_conf"
        fi
        
        # Apply NVIDIA-specific optimizations
        export __GL_SYNC_TO_VBLANK=0
        export __GL_THREADED_OPTIMIZATIONS=1
        log_debug "Applied NVIDIA performance optimizations"
    fi
    
    log_debug "Pre-flight checks completed"
}

# Show help information
show_help() {
    cat << EOF
i3-gnome - Optimized i3 window manager integration with GNOME

USAGE:
    i3-gnome [OPTIONS]

OPTIONS:
    --debug     Enable debug mode with verbose logging and session monitoring
    --help      Show this help message

DESCRIPTION:
    This script provides an optimized integration between the i3 window manager
    and GNOME desktop environment. It includes:
    
    - Asynchronous D-Bus operations for faster startup
    - Performance optimizations for better responsiveness
    - Automatic NVIDIA workarounds
    - Comprehensive error handling and recovery
    - Optional session monitoring in debug mode

ENVIRONMENT VARIABLES:
    DEBUG_MODE          Enable debug mode (same as --debug)
    I3_CONFIG_PATH      Custom path to i3 configuration file
    STARTUP_TIMEOUT     Timeout for service startup (default: 15 seconds)

EXAMPLES:
    i3-gnome                    # Normal startup
    i3-gnome --debug           # Debug mode with monitoring
    DEBUG_MODE=true i3-gnome   # Debug mode via environment

For more information, see the project documentation.
EOF
}

# Function to setup signal handlers for graceful shutdown
setup_signal_handlers() {
    log_debug "Setting up signal handlers"
    
    # Handle common termination signals
    trap 'handle_shutdown SIGTERM' TERM
    trap 'handle_shutdown SIGINT' INT
    trap 'handle_shutdown SIGHUP' HUP
    trap 'handle_shutdown SIGQUIT' QUIT
}

# Function to handle graceful shutdown
handle_shutdown() {
    local signal="$1"
    log_info "Received $signal signal - shutting down gracefully"
    
    # Stop session monitoring if running
    if [ -n "${MONITOR_PID:-}" ]; then
        kill "$MONITOR_PID" 2>/dev/null || true
    fi
    
    # Re-enable animations if we disabled them
    gsettings set org.gnome.desktop.interface enable-animations true 2>/dev/null || true
    
    # Unmask tracker services if we masked them
    systemctl --user unmask tracker-extract-3.service 2>/dev/null || true
    systemctl --user unmask tracker-miner-fs-3.service 2>/dev/null || true
    
    log_info "Graceful shutdown completed"
    exit 0
}

# Main function
main() {
    local start_time
    start_time=$(date +%s)
    
    log_info "Starting i3-gnome session (optimized version)"
    
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --debug)
                DEBUG_MODE="true"
                log_info "Debug mode enabled"
                ;;
            --help)
                show_help
                exit 0
                ;;
            *)
                log_error "Unknown option: $1"
                show_help
                exit 1
                ;;
        esac
        shift
    done
    
    # Setup signal handlers for graceful shutdown
    setup_signal_handlers
    
    # Apply performance optimizations early
    optimize_dbus_environment
    setup_performance_monitoring
    preload_libraries
    optimize_system_performance
    
    # Validate environment before proceeding
    if ! validate_environment; then
        log_error "Environment validation failed"
        exit 1
    fi
    
    # Check for NVIDIA-specific issues and apply workarounds
    preflight_checks
    
    # Set up environment variables
    setup_environment
    
    # Load X resources
    load_xresources
    
    # Register with GNOME Session Manager if available
    register_with_gnome_session || log_warning "Failed to register with GNOME Session Manager"
    
    # Start GNOME services asynchronously for better performance
    start_gnome_services_async
    
    # Wait for essential GNOME services (with timeout and async approach)
    wait_for_gnome_services
    
    # Apply GNOME-specific optimizations
    apply_gnome_optimizations
    
    # Launch i3 window manager
    launch_i3
    
    local end_time
    end_time=$(date +%s)
    local total_time=$((end_time - start_time))
    
    log_info "i3-gnome session startup completed in ${total_time} seconds"
    
    # Keep the script running to maintain the session
    if [ "$DEBUG_MODE" = "true" ]; then
        log_info "Session running in debug mode - monitoring for issues"
        monitor_session
    else
        # In normal mode, just wait for i3 to exit
        wait
    fi
}

# Function to monitor session health in debug mode
monitor_session() {
    log_info "Starting session monitoring"
    
    while true; do
        # Check if i3 is still running
        if ! check_i3_running; then
            log_warning "i3 is no longer running - session may have ended"
            break
        fi
        
        # Check GNOME services health
        local failed_services=0
        local critical_services=(
            "org.gnome.SettingsDaemon.XSettings"
            "org.gnome.SettingsDaemon.MediaKeys"
            "org.gnome.SettingsDaemon.Power"
        )
        
        for service in "${critical_services[@]}"; do
            if ! timeout 2 dbus-send --session --print-reply \
                --dest="$service" / \
                org.freedesktop.DBus.Introspectable.Introspect >/dev/null 2>&1; then
                failed_services=$((failed_services + 1))
                log_warning "Critical service $service is not responding"
            fi
        done
        
        if [ $failed_services -gt 1 ]; then
            log_error "Multiple critical services failed - session may be unstable"
        fi
        
        # Monitor memory usage
        local memory_usage
        memory_usage=$(ps -o pid,ppid,cmd,%mem --sort=-%mem | head -10)
        if [ "$DEBUG_MODE" = "true" ]; then
            log_debug "Top memory consumers:\n$memory_usage"
        fi
        
        sleep 30  # Check every 30 seconds
    done
    
    log_info "Session monitoring ended"
}

# Run the main function
main "$@"
