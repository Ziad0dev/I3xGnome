#!/usr/bin/env bash
#
# i3xGnome AutoFix - Automated diagnostic and repair tool
# 
# This script automatically detects and fixes common issues that cause
# i3xGnome crashes, providing both diagnosis and automated remediation.
#

set -euo pipefail

# Script configuration
readonly SCRIPT_NAME="i3-gnome-autofix"
readonly VERSION="2.1.0"
readonly LOG_FILE="${XDG_CACHE_HOME:-$HOME/.cache}/i3-gnome-autofix.log"

# Colors for output
readonly RED="\033[1;31m"
readonly GREEN="\033[1;32m"
readonly YELLOW="\033[1;33m"
readonly BLUE="\033[1;34m"
readonly CYAN="\033[1;36m"
readonly RESET="\033[0m"

# State tracking
ISSUES_FOUND=0
ISSUES_FIXED=0
WARNINGS_FOUND=0
DRY_RUN=false
AUTO_FIX=false

# Ensure log directory exists
mkdir -p "$(dirname "$LOG_FILE")"

# Enhanced logging
log() {
    local level="$1"
    local message="$2"
    local timestamp
    timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp][$level] $message" | tee -a "$LOG_FILE"
}

log_info() {
    echo -e "${BLUE}[INFO]${RESET} $1"
    log "INFO" "$1"
}

log_success() {
    echo -e "${GREEN}[OK]${RESET} $1"
    log "SUCCESS" "$1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${RESET} $1"
    WARNINGS_FOUND=$((WARNINGS_FOUND + 1))
    log "WARNING" "$1"
}

log_error() {
    echo -e "${RED}[ERROR]${RESET} $1"
    ISSUES_FOUND=$((ISSUES_FOUND + 1))
    log "ERROR" "$1"
}

log_fix() {
    echo -e "${CYAN}[FIXED]${RESET} $1"
    ISSUES_FIXED=$((ISSUES_FIXED + 1))
    log "FIXED" "$1"
}

# Helper functions
has_command() {
    command -v "$1" >/dev/null 2>&1
}

is_running_as_root() {
    [ "$(id -u)" -eq 0 ]
}

confirm_action() {
    local message="$1"
    if [ "$AUTO_FIX" = "true" ]; then
        return 0
    fi
    
    echo -e "${YELLOW}$message${RESET}"
    read -p "Do you want to proceed? (y/N): " -r
    [[ $REPLY =~ ^[Yy]$ ]]
}

apply_fix() {
    local description="$1"
    local command="$2"
    
    if [ "$DRY_RUN" = "true" ]; then
        echo -e "${CYAN}[DRY RUN]${RESET} Would fix: $description"
        echo "  Command: $command"
        return 0
    fi
    
    if confirm_action "Fix: $description"; then
        if eval "$command"; then
            log_fix "$description"
            return 0
        else
            log_error "Failed to fix: $description"
            return 1
        fi
    else
        log_info "Skipped fix: $description"
        return 1
    fi
}

# Print header
print_header() {
    echo -e "${BLUE}╔══════════════════════════════════════════════════════════════╗${RESET}"
    echo -e "${BLUE}║                i3xGnome AutoFix Tool v${VERSION}                  ║${RESET}"
    echo -e "${BLUE}║            Automated Crash Detection and Repair             ║${RESET}"
    echo -e "${BLUE}╚══════════════════════════════════════════════════════════════╝${RESET}"
    echo ""
    
    if [ "$DRY_RUN" = "true" ]; then
        echo -e "${YELLOW}Running in DRY RUN mode - no changes will be made${RESET}"
        echo ""
    elif [ "$AUTO_FIX" = "true" ]; then
        echo -e "${CYAN}Running in AUTO FIX mode - issues will be fixed automatically${RESET}"
        echo ""
    fi
}

# Check and fix missing dependencies
check_fix_dependencies() {
    log_info "Checking and fixing dependencies..."
    
    local deps=("i3" "gnome-session" "xrdb" "dbus-x11")
    local missing_deps=()
    
    # Check which dependencies are missing
    for dep in "${deps[@]}"; do
        if has_command "$dep" || dpkg -l "$dep" >/dev/null 2>&1; then
            log_success "$dep is installed"
        else
            log_error "$dep is missing"
            missing_deps+=("$dep")
        fi
    done
    
    # Check for gnome-settings-daemon
    if [ -d "/usr/libexec" ] && ls /usr/libexec/gsd-* >/dev/null 2>&1; then
        log_success "gnome-settings-daemon components are installed"
    elif has_command "gnome-settings-daemon"; then
        log_success "gnome-settings-daemon is installed"
    else
        log_error "gnome-settings-daemon is missing"
        missing_deps+=("gnome-settings-daemon")
    fi
    
    # Fix missing dependencies
    if [ ${#missing_deps[@]} -gt 0 ]; then
        local install_cmd="sudo apt update && sudo apt install -y ${missing_deps[*]}"
        apply_fix "Install missing dependencies: ${missing_deps[*]}" "$install_cmd"
    fi
}

# Check and fix NVIDIA issues
check_fix_nvidia() {
    log_info "Checking and fixing NVIDIA configuration..."
    
    if ! lspci | grep -i nvidia >/dev/null 2>&1; then
        log_info "No NVIDIA GPU detected, skipping NVIDIA fixes"
        return 0
    fi
    
    log_info "NVIDIA GPU detected, checking configuration..."
    
    # Check for NVIDIA drivers
    if ! has_command "nvidia-smi"; then
        log_error "NVIDIA GPU detected but drivers not installed"
        apply_fix "Install NVIDIA drivers" "sudo ubuntu-drivers autoinstall"
    fi
    
    # Check for NVIDIA Xorg configuration
    local nvidia_conf="/etc/X11/xorg.conf.d/20-nvidia.conf"
    if [ ! -f "$nvidia_conf" ]; then
        log_error "NVIDIA Xorg configuration missing"
        
        local fix_cmd="sudo mkdir -p /etc/X11/xorg.conf.d && sudo tee '$nvidia_conf' << 'EOF'
Section \"Device\"
    Identifier \"NVIDIA Card\"
    Driver \"nvidia\"
    VendorName \"NVIDIA Corporation\"
    Option \"AllowEmptyInitialConfiguration\" \"true\"
    Option \"UseDisplayDevice\" \"none\"
EndSection

Section \"Screen\"
    Identifier \"Default Screen\"
    Device \"NVIDIA Card\"
EndSection
EOF"
        
        apply_fix "Create NVIDIA Xorg configuration" "$fix_cmd"
    else
        log_success "NVIDIA Xorg configuration exists"
        
        # Validate configuration content
        if ! grep -q "AllowEmptyInitialConfiguration" "$nvidia_conf"; then
            log_warning "NVIDIA configuration may be incomplete"
        fi
    fi
    
    # Check Wayland setting in GDM
    local gdm_configs=("/etc/gdm3/custom.conf" "/etc/gdm/custom.conf")
    local wayland_disabled=false
    
    for gdm_conf in "${gdm_configs[@]}"; do
        if [ -f "$gdm_conf" ]; then
            if grep -q "WaylandEnable=false" "$gdm_conf"; then
                wayland_disabled=true
                log_success "Wayland is disabled in $gdm_conf"
                break
            fi
        fi
    done
    
    if [ "$wayland_disabled" = "false" ]; then
        log_error "Wayland may be enabled - this causes NVIDIA crashes"
        
        # Find the GDM config file to modify
        local target_gdm_conf=""
        for gdm_conf in "${gdm_configs[@]}"; do
            if [ -f "$gdm_conf" ]; then
                target_gdm_conf="$gdm_conf"
                break
            fi
        done
        
        if [ -z "$target_gdm_conf" ]; then
            target_gdm_conf="/etc/gdm3/custom.conf"
        fi
        
        local disable_wayland_cmd="sudo cp '$target_gdm_conf' '$target_gdm_conf.backup-\$(date +%s)' 2>/dev/null || true
sudo tee '$target_gdm_conf' << 'EOF'
[daemon]
WaylandEnable=false

[security]

[xdmcp]

[chooser]

[debug]
EOF"
        
        apply_fix "Disable Wayland in GDM to prevent NVIDIA crashes" "$disable_wayland_cmd"
    fi
    
    # Check DRM modeset
    if [ -f /sys/module/nvidia_drm/parameters/modeset ]; then
        local modeset_status
        modeset_status=$(cat /sys/module/nvidia_drm/parameters/modeset 2>/dev/null || echo "N")
        
        if [ "$modeset_status" != "Y" ]; then
            log_warning "NVIDIA DRM modeset is disabled"
            log_info "Consider enabling with: nvidia-drm.modeset=1 in kernel parameters"
        else
            log_success "NVIDIA DRM modeset is enabled"
        fi
    fi
}

# Check and fix display manager issues
check_fix_display_manager() {
    log_info "Checking and fixing display manager configuration..."
    
    # Detect current display manager
    local dm="unknown"
    if systemctl is-active gdm3 >/dev/null 2>&1 || systemctl is-active gdm >/dev/null 2>&1; then
        dm="gdm"
    elif systemctl is-active lightdm >/dev/null 2>&1; then
        dm="lightdm"
    elif systemctl is-active sddm >/dev/null 2>&1; then
        dm="sddm"
    fi
    
    log_info "Display Manager: $dm"
    
    case "$dm" in
        "gdm")
            log_info "GDM detected - checking for common issues"
            
            # GDM with NVIDIA often has issues, recommend LightDM
            if lspci | grep -i nvidia >/dev/null 2>&1; then
                log_warning "GDM + NVIDIA combination can cause crashes"
                log_info "Consider switching to LightDM for better stability"
                
                if confirm_action "Switch from GDM to LightDM (recommended for NVIDIA)?"; then
                    local switch_cmd="sudo apt install -y lightdm && sudo dpkg-reconfigure lightdm"
                    apply_fix "Switch to LightDM display manager" "$switch_cmd"
                fi
            fi
            ;;
        "lightdm")
            log_success "LightDM detected (recommended for i3xGnome)"
            ;;
        "unknown")
            log_error "Could not detect display manager"
            log_info "Installing LightDM as default"
            apply_fix "Install LightDM display manager" "sudo apt install -y lightdm"
            ;;
    esac
}

# Check and fix i3 configuration
check_fix_i3_config() {
    log_info "Checking and fixing i3 configuration..."
    
    local i3_config="$HOME/.config/i3/config"
    
    # Check if i3 config exists
    if [ ! -f "$i3_config" ]; then
        log_error "i3 configuration file missing"
        
        local create_config_cmd="mkdir -p '$HOME/.config/i3' && i3-config-wizard --modifier Mod4 || cp /etc/i3/config '$i3_config' 2>/dev/null || curl -s https://raw.githubusercontent.com/i3/i3/next/etc/config.keycodes > '$i3_config'"
        apply_fix "Create default i3 configuration" "$create_config_cmd"
    else
        log_success "i3 configuration file exists"
        
        # Validate i3 configuration
        if ! i3 -C >/dev/null 2>&1; then
            log_error "i3 configuration is invalid"
            
            # Backup and create new config
            local fix_config_cmd="cp '$i3_config' '$i3_config.broken-\$(date +%s)' && curl -s https://raw.githubusercontent.com/i3/i3/next/etc/config.keycodes > '$i3_config'"
            apply_fix "Fix broken i3 configuration" "$fix_config_cmd"
        else
            log_success "i3 configuration is valid"
        fi
    fi
}

# Check and fix D-Bus issues
check_fix_dbus() {
    log_info "Checking and fixing D-Bus configuration..."
    
    if [ -z "${DBUS_SESSION_BUS_ADDRESS:-}" ]; then
        log_error "D-Bus session bus address not set"
        log_info "This usually indicates a session startup problem"
        return 1
    fi
    
    # Test D-Bus connectivity
    if dbus-send --session --print-reply --dest=org.freedesktop.DBus /org/freedesktop/DBus org.freedesktop.DBus.ListNames >/dev/null 2>&1; then
        log_success "D-Bus session bus is functional"
    else
        log_error "D-Bus session bus is not responding"
        
        # Try to restart D-Bus user session
        apply_fix "Restart D-Bus user session" "systemctl --user restart dbus.service"
    fi
    
    # Check for GNOME Session Manager
    if dbus-send --session --print-reply --dest=org.gnome.SessionManager /org/gnome/SessionManager org.freedesktop.DBus.Introspectable.Introspect >/dev/null 2>&1; then
        log_success "GNOME Session Manager is accessible"
    else
        log_warning "GNOME Session Manager not accessible (may be normal outside GNOME session)"
    fi
}

# Check and fix memory issues
check_fix_memory() {
    log_info "Checking system memory..."
    
    local mem_available
    mem_available=$(awk '/MemAvailable/ {print $2}' /proc/meminfo 2>/dev/null || echo "0")
    local mem_available_mb=$((mem_available / 1024))
    
    log_info "Available memory: ${mem_available_mb}MB"
    
    if [ "$mem_available_mb" -lt 1024 ]; then
        log_warning "Low memory detected (${mem_available_mb}MB)"
        log_warning "i3xGnome may crash due to insufficient memory"
        
        # Check if swap is enabled
        if ! swapon --show >/dev/null 2>&1; then
            log_error "No swap space configured"
            
            local enable_swap_cmd="sudo fallocate -l 2G /swapfile && sudo chmod 600 /swapfile && sudo mkswap /swapfile && sudo swapon /swapfile && echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab"
            apply_fix "Create and enable 2GB swap file" "$enable_swap_cmd"
        else
            log_success "Swap space is enabled"
        fi
    else
        log_success "Sufficient memory available"
    fi
}

# Check and fix file permissions
check_fix_permissions() {
    log_info "Checking and fixing file permissions..."
    
    # Check home directory permissions
    local home_perms
    home_perms=$(stat -c "%a" "$HOME" 2>/dev/null || echo "000")
    
    if [ "$home_perms" != "755" ] && [ "$home_perms" != "750" ]; then
        log_warning "Home directory permissions may be too restrictive: $home_perms"
    fi
    
    # Check .config directory
    local config_dir="$HOME/.config"
    if [ ! -d "$config_dir" ]; then
        apply_fix "Create .config directory" "mkdir -p '$config_dir'"
    fi
    
    # Check i3 config directory permissions
    local i3_config_dir="$HOME/.config/i3"
    if [ -d "$i3_config_dir" ]; then
        local i3_perms
        i3_perms=$(stat -c "%a" "$i3_config_dir" 2>/dev/null || echo "000")
        
        if [ "$i3_perms" != "755" ]; then
            apply_fix "Fix i3 config directory permissions" "chmod 755 '$i3_config_dir'"
        fi
    fi
}

# Check and fix session files
check_fix_session_files() {
    log_info "Checking i3xGnome installation files..."
    
    local files=(
        "/usr/bin/i3-gnome:executable:755"
        "/usr/bin/gnome-session-i3:executable:755"
        "/usr/share/gnome-session/sessions/i3-gnome.session:readable:644"
        "/usr/share/applications/i3-gnome.desktop:readable:644"
        "/usr/share/xsessions/i3-gnome.desktop:readable:644"
    )
    
    local missing_files=()
    
    for file_info in "${files[@]}"; do
        local file_path="${file_info%%:*}"
        local rest="${file_info#*:}"
        local file_type="${rest%%:*}"
        local expected_perms="${rest##*:}"
        
        if [ -f "$file_path" ]; then
            log_success "Found: $file_path"
            
            # Check permissions
            local actual_perms
            actual_perms=$(stat -c "%a" "$file_path" 2>/dev/null || echo "000")
            
            if [ "$actual_perms" != "$expected_perms" ]; then
                apply_fix "Fix permissions for $file_path" "sudo chmod $expected_perms '$file_path'"
            fi
            
            # Check if executable files are actually executable
            if [ "$file_type" = "executable" ] && [ ! -x "$file_path" ]; then
                apply_fix "Make $file_path executable" "sudo chmod +x '$file_path'"
            fi
        else
            log_error "Missing: $file_path"
            missing_files+=("$file_path")
        fi
    done
    
    if [ ${#missing_files[@]} -gt 0 ]; then
        log_error "Some i3xGnome files are missing"
        log_info "Consider reinstalling i3xGnome:"
        log_info "  cd /path/to/I3xGnome && sudo make install"
    fi
}

# Generate comprehensive report
generate_report() {
    echo ""
    echo -e "${BLUE}╔══════════════════════════════════════════════════════════════╗${RESET}"
    echo -e "${BLUE}║                        Final Report                         ║${RESET}"
    echo -e "${BLUE}╚══════════════════════════════════════════════════════════════╝${RESET}"
    echo ""
    
    echo -e "${RED}Issues Found: $ISSUES_FOUND${RESET}"
    echo -e "${CYAN}Issues Fixed: $ISSUES_FIXED${RESET}"
    echo -e "${YELLOW}Warnings: $WARNINGS_FOUND${RESET}"
    echo ""
    
    if [ $ISSUES_FOUND -eq 0 ] && [ $WARNINGS_FOUND -eq 0 ]; then
        echo -e "${GREEN}✓ No issues detected! Your system should work properly with i3xGnome.${RESET}"
    elif [ $ISSUES_FIXED -ge $ISSUES_FOUND ]; then
        echo -e "${GREEN}✓ All critical issues have been fixed!${RESET}"
        echo -e "${CYAN}Recommendations:${RESET}"
        echo "  1. Reboot your system to ensure all changes take effect"
        echo "  2. Try logging into i3+GNOME session"
        echo "  3. Run this tool again if you encounter any problems"
    else
        echo -e "${YELLOW}⚠ Some issues remain unfixed${RESET}"
        echo -e "${CYAN}Next Steps:${RESET}"
        echo "  1. Review the issues above and fix them manually"
        echo "  2. Run this tool with --auto-fix to fix issues automatically"
        echo "  3. Check the log file: $LOG_FILE"
    fi
    
    echo ""
    echo -e "${CYAN}Troubleshooting Commands:${RESET}"
    echo "  Check system logs: journalctl -b 0 -p err"
    echo "  Check user session: journalctl --user -b 0"
    echo "  Test i3 config: i3 -C"
    echo "  Test session: session/i3-gnome-enhanced --debug"
    echo ""
    
    # Save report to file
    local report_file="$HOME/.cache/i3-gnome-autofix-report-$(date +%s).txt"
    {
        echo "i3xGnome AutoFix Report - $(date)"
        echo "========================================"
        echo "Issues Found: $ISSUES_FOUND"
        echo "Issues Fixed: $ISSUES_FIXED"
        echo "Warnings: $WARNINGS_FOUND"
        echo ""
        echo "System Information:"
        echo "  Distribution: $(lsb_release -sd 2>/dev/null || echo "Unknown")"
        echo "  Kernel: $(uname -r)"
        echo "  Display Server: ${XDG_SESSION_TYPE:-Unknown}"
        echo "  Current Desktop: ${XDG_CURRENT_DESKTOP:-Unknown}"
        if lspci | grep -i nvidia >/dev/null 2>&1; then
            echo "  NVIDIA GPU: Yes"
            if command -v nvidia-smi >/dev/null 2>&1; then
                echo "  NVIDIA Driver: $(nvidia-smi --query-gpu=driver_version --format=csv,noheader,nounits 2>/dev/null | head -1 || echo "unknown")"
            fi
        fi
        echo ""
        echo "For detailed logs, see: $LOG_FILE"
    } > "$report_file"
    
    echo -e "${CYAN}Full report saved to: $report_file${RESET}"
}

# Show help
show_help() {
    cat << EOF
i3xGnome AutoFix - Automated diagnostic and repair tool (v$VERSION)

USAGE:
    $0 [OPTIONS]

OPTIONS:
    --auto-fix      Automatically fix all detected issues without prompting
    --dry-run       Show what would be fixed without making changes
    --help          Show this help message

DESCRIPTION:
    This tool automatically detects and fixes common issues that cause
    i3xGnome crashes, including:
    
    - Missing dependencies
    - NVIDIA driver and configuration issues
    - Display manager conflicts
    - i3 configuration problems
    - D-Bus connectivity issues
    - Memory and permission problems
    - Session file integrity

EXAMPLES:
    $0                      # Interactive mode (recommended)
    $0 --dry-run           # See what would be fixed
    $0 --auto-fix          # Fix everything automatically
    sudo $0 --auto-fix     # Fix system-wide issues automatically

EXIT CODES:
    0 - No issues found or all issues fixed
    1 - Critical issues found that couldn't be fixed
    2 - Warnings found but system should work

For more information, see: https://github.com/Ziad0dev/I3xGnome
EOF
}

# Main execution
main() {
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --auto-fix)
                AUTO_FIX=true
                log_info "Auto-fix mode enabled"
                ;;
            --dry-run)
                DRY_RUN=true
                log_info "Dry run mode enabled"
                ;;
            --help)
                show_help
                exit 0
                ;;
            *)
                echo "Unknown option: $1"
                show_help
                exit 1
                ;;
        esac
        shift
    done
    
    print_header
    
    # Check if running as root for certain fixes
    if is_running_as_root; then
        log_info "Running as root - system-wide fixes available"
    else
        log_info "Running as user - some fixes may require sudo"
    fi
    
    # Run all checks and fixes
    check_fix_dependencies
    check_fix_nvidia
    check_fix_display_manager
    check_fix_i3_config
    check_fix_dbus
    check_fix_memory
    check_fix_permissions
    check_fix_session_files
    
    # Generate final report
    generate_report
    
    # Exit with appropriate code
    if [ $ISSUES_FOUND -eq 0 ] && [ $WARNINGS_FOUND -eq 0 ]; then
        exit 0
    elif [ $ISSUES_FIXED -ge $ISSUES_FOUND ]; then
        exit 0
    elif [ $WARNINGS_FOUND -gt 0 ] && [ $ISSUES_FOUND -eq 0 ]; then
        exit 2
    else
        exit 1
    fi
}

# Run main function
main "$@" 