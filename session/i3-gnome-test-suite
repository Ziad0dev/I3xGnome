#!/usr/bin/env bash
#
# i3xGnome Test Suite - Comprehensive Testing Framework
# 
# This script tests all crash scenarios and configurations to validate
# the stability improvements implemented in i3xGnome Enhanced.
#

set -euo pipefail

# Script configuration
readonly SCRIPT_NAME="i3-gnome-test-suite"
readonly VERSION="1.0.0"
readonly LOG_FILE="${XDG_CACHE_HOME:-$HOME/.cache}/i3-gnome-test-suite.log"

# Colors for output
readonly RED="\033[1;31m"
readonly GREEN="\033[1;32m"
readonly YELLOW="\033[1;33m"
readonly BLUE="\033[1;34m"
readonly CYAN="\033[1;36m"
readonly RESET="\033[0m"

# Test configuration
TESTS_PASSED=0
TESTS_FAILED=0
TESTS_TOTAL=0
DRY_RUN=false
VERBOSE=false

# Test results
declare -a FAILED_TESTS=()
declare -a PASSED_TESTS=()

# Enhanced logging
log() {
    local level="$1"
    local message="$2"
    local timestamp
    timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp][$level] $message" | tee -a "$LOG_FILE"
}

log_info() {
    echo -e "${BLUE}[INFO]${RESET} $1"
    log "INFO" "$1"
}

log_success() {
    echo -e "${GREEN}[PASS]${RESET} $1"
    TESTS_PASSED=$((TESTS_PASSED + 1))
    PASSED_TESTS+=("$1")
    log "PASS" "$1"
}

log_failure() {
    echo -e "${RED}[FAIL]${RESET} $1"
    TESTS_FAILED=$((TESTS_FAILED + 1))
    FAILED_TESTS+=("$1")
    log "FAIL" "$1"
}

log_warning() {
    echo -e "${YELLOW}[WARN]${RESET} $1"
    log "WARN" "$1"
}

# Helper functions
run_test() {
    local test_name="$1"
    local test_command="$2"
    
    TESTS_TOTAL=$((TESTS_TOTAL + 1))
    
    log_info "Running test: $test_name"
    
    if [ "$VERBOSE" = "true" ]; then
        echo -e "${CYAN}Command: $test_command${RESET}"
    fi
    
    if [ "$DRY_RUN" = "true" ]; then
        log_success "$test_name (DRY RUN)"
        return 0
    fi
    
    if eval "$test_command" >/dev/null 2>&1; then
        log_success "$test_name"
        return 0
    else
        log_failure "$test_name"
        return 1
    fi
}

run_test_with_output() {
    local test_name="$1"
    local test_command="$2"
    local expected_pattern="$3"
    
    TESTS_TOTAL=$((TESTS_TOTAL + 1))
    
    log_info "Running test: $test_name"
    
    if [ "$DRY_RUN" = "true" ]; then
        log_success "$test_name (DRY RUN)"
        return 0
    fi
    
    local output
    if output=$(eval "$test_command" 2>&1); then
        if echo "$output" | grep -q "$expected_pattern"; then
            log_success "$test_name"
            return 0
        else
            log_failure "$test_name - Expected pattern '$expected_pattern' not found"
            if [ "$VERBOSE" = "true" ]; then
                echo "Output: $output"
            fi
            return 1
        fi
    else
        log_failure "$test_name - Command failed"
        return 1
    fi
}

# Test header
print_header() {
    echo -e "${BLUE}╔══════════════════════════════════════════════════════════════╗${RESET}"
    echo -e "${BLUE}║             i3xGnome Test Suite v${VERSION}                      ║${RESET}"
    echo -e "${BLUE}║          Comprehensive Crash Prevention Testing             ║${RESET}"
    echo -e "${BLUE}╚══════════════════════════════════════════════════════════════╝${RESET}"
    echo ""
    
    if [ "$DRY_RUN" = "true" ]; then
        echo -e "${YELLOW}Running in DRY RUN mode - no actual tests will be executed${RESET}"
        echo ""
    fi
}

# Test 1: Hardware Detection Tests
test_hardware_detection() {
    log_info "=== Hardware Detection Tests ==="
    
    # Test NVIDIA GPU detection
    if lspci | grep -i nvidia >/dev/null 2>&1; then
        run_test "NVIDIA GPU Detection" "lspci | grep -i nvidia"
        run_test "NVIDIA Driver Check" "nvidia-smi --query-gpu=name --format=csv,noheader"
    else
        log_info "No NVIDIA GPU detected - skipping NVIDIA tests"
    fi
    
    # Test AMD GPU detection
    if lspci | grep -i amd >/dev/null 2>&1; then
        run_test "AMD GPU Detection" "lspci | grep -i amd"
    fi
    
    # Test Intel GPU detection
    if lspci | grep -i intel >/dev/null 2>&1; then
        run_test "Intel GPU Detection" "lspci | grep -i intel"
    fi
    
    # Test memory availability
    run_test "Memory Check" "[ \$(awk '/MemAvailable/ {print \$2}' /proc/meminfo) -gt 1048576 ]"
}

# Test 2: D-Bus Functionality Tests
test_dbus_functionality() {
    log_info "=== D-Bus Functionality Tests ==="
    
    # Test D-Bus session bus
    run_test "D-Bus Session Bus" "dbus-send --session --print-reply --dest=org.freedesktop.DBus /org/freedesktop/DBus org.freedesktop.DBus.ListNames"
    
    # Test D-Bus timeout handling
    run_test_with_output "D-Bus Timeout Handling" "timeout 5 dbus-send --session --print-reply --dest=org.freedesktop.DBus /org/freedesktop/DBus org.freedesktop.DBus.ListNames" "array"
    
    # Test enhanced D-Bus function from our script
    run_test_with_output "Enhanced D-Bus Function Test" "timeout 10 dbus-send --session --print-reply --dest=org.freedesktop.DBus /org/freedesktop/DBus org.freedesktop.DBus.ListNames 2>/dev/null | head -1" "method return"
}

# Test 3: NVIDIA Configuration Tests
test_nvidia_configuration() {
    if ! lspci | grep -i nvidia >/dev/null 2>&1; then
        log_info "=== NVIDIA Configuration Tests === (SKIPPED - No NVIDIA GPU)"
        return 0
    fi
    
    log_info "=== NVIDIA Configuration Tests ==="
    
    # Test Xorg configuration
    local nvidia_conf_files=("/etc/X11/xorg.conf.d/20-nvidia.conf" "/etc/X11/xorg.conf")
    local found_config=false
    
    for conf_file in "${nvidia_conf_files[@]}"; do
        if [ -f "$conf_file" ]; then
            run_test "NVIDIA Xorg Config Exists ($conf_file)" "[ -f '$conf_file' ]"
            found_config=true
            break
        fi
    done
    
    if [ "$found_config" = "false" ]; then
        log_failure "No NVIDIA Xorg configuration found"
    fi
    
    # Test Wayland disable status
    local gdm_configs=("/etc/gdm3/custom.conf" "/etc/gdm/custom.conf")
    for gdm_conf in "${gdm_configs[@]}"; do
        if [ -f "$gdm_conf" ]; then
            run_test_with_output "Wayland Disabled Check ($gdm_conf)" "grep -i wayland '$gdm_conf'" "WaylandEnable=false"
            break
        fi
    done
    
    # Test NVIDIA environment variables
    run_test "NVIDIA Environment Variables" "[ -n \"\${__GL_SYNC_TO_VBLANK:-}\" ] || export __GL_SYNC_TO_VBLANK=1"
}

# Test 4: i3 Configuration Tests
test_i3_configuration() {
    log_info "=== i3 Configuration Tests ==="
    
    # Test i3 installation
    run_test "i3 Installation" "command -v i3"
    
    # Test i3 config syntax
    if [ -f "$HOME/.config/i3/config" ]; then
        run_test "i3 Config Syntax" "i3 -C -c '$HOME/.config/i3/config'"
        run_test "i3 Config Permissions" "[ -r '$HOME/.config/i3/config' ]"
    else
        log_warning "No i3 config found at \$HOME/.config/i3/config"
    fi
    
    # Test i3status if available
    if command -v i3status >/dev/null; then
        run_test "i3status Available" "command -v i3status"
    fi
}

# Test 5: GNOME Session Tests
test_gnome_session() {
    log_info "=== GNOME Session Tests ==="
    
    # Test GNOME Session components
    run_test "gnome-session Installation" "command -v gnome-session"
    run_test "gnome-settings-daemon Components" "ls /usr/libexec/gsd-* >/dev/null 2>&1 || command -v gnome-settings-daemon"
    
    # Test session files
    local session_files=(
        "/usr/share/gnome-session/sessions/i3-gnome.session"
        "/usr/share/applications/i3-gnome.desktop"
        "/usr/share/xsessions/i3-gnome.desktop"
    )
    
    for session_file in "${session_files[@]}"; do
        run_test "Session File Exists ($session_file)" "[ -f '$session_file' ]"
    done
}

# Test 6: Enhanced Script Tests
test_enhanced_scripts() {
    log_info "=== Enhanced Script Tests ==="
    
    # Test enhanced session script
    if [ -f "session/i3-gnome-enhanced" ]; then
        run_test "Enhanced Script Exists" "[ -f 'session/i3-gnome-enhanced' ]"
        run_test "Enhanced Script Executable" "[ -x 'session/i3-gnome-enhanced' ]"
        run_test "Enhanced Script Syntax" "bash -n session/i3-gnome-enhanced"
    else
        log_failure "Enhanced script not found: session/i3-gnome-enhanced"
    fi
    
    # Test autofix script
    if [ -f "session/i3-gnome-autofix" ]; then
        run_test "AutoFix Script Exists" "[ -f 'session/i3-gnome-autofix' ]"
        run_test "AutoFix Script Executable" "[ -x 'session/i3-gnome-autofix' ]"
        run_test "AutoFix Script Syntax" "bash -n session/i3-gnome-autofix"
    else
        log_failure "AutoFix script not found: session/i3-gnome-autofix"
    fi
}

# Test 7: System Dependencies Tests
test_system_dependencies() {
    log_info "=== System Dependencies Tests ==="
    
    local required_packages=("i3" "gnome-session" "xrdb" "dbus-x11")
    
    for package in "${required_packages[@]}"; do
        run_test "Package: $package" "command -v '$package' >/dev/null 2>&1 || dpkg -l '$package' >/dev/null 2>&1"
    done
    
    # Test display manager
    if systemctl is-enabled lightdm >/dev/null 2>&1; then
        run_test "LightDM Enabled" "systemctl is-enabled lightdm"
    elif systemctl is-enabled gdm3 >/dev/null 2>&1; then
        run_test "GDM3 Enabled" "systemctl is-enabled gdm3"
    elif systemctl is-enabled gdm >/dev/null 2>&1; then
        run_test "GDM Enabled" "systemctl is-enabled gdm"
    else
        log_warning "No known display manager detected"
    fi
}

# Test 8: Performance Tests
test_performance() {
    log_info "=== Performance Tests ==="
    
    # Test available memory
    local mem_available_mb
    mem_available_mb=$(awk '/MemAvailable/ {print int($2/1024)}' /proc/meminfo)
    
    if [ "$mem_available_mb" -gt 1024 ]; then
        log_success "Sufficient Memory ($mem_available_mb MB)"
        TESTS_PASSED=$((TESTS_PASSED + 1))
    else
        log_failure "Insufficient Memory ($mem_available_mb MB)"
        TESTS_FAILED=$((TESTS_FAILED + 1))
    fi
    TESTS_TOTAL=$((TESTS_TOTAL + 1))
    
    # Test CPU load
    local load_avg
    load_avg=$(uptime | awk -F'load average:' '{print $2}' | awk '{print $1}' | tr -d ',')
    
    if (( $(echo "$load_avg < 2.0" | bc -l) )); then
        log_success "Normal CPU Load ($load_avg)"
        TESTS_PASSED=$((TESTS_PASSED + 1))
    else
        log_warning "High CPU Load ($load_avg)"
        TESTS_FAILED=$((TESTS_FAILED + 1))
    fi
    TESTS_TOTAL=$((TESTS_TOTAL + 1))
}

# Test 9: Crash Scenario Simulation
test_crash_scenarios() {
    log_info "=== Crash Scenario Simulation ==="
    
    # Test D-Bus timeout handling
    run_test_with_output "D-Bus Timeout Simulation" "timeout 2 dbus-send --session --print-reply --dest=org.freedesktop.DBus /org/freedesktop/DBus org.freedesktop.DBus.ListNames || echo 'TIMEOUT_HANDLED'" "TIMEOUT_HANDLED\\|array"
    
    # Test service unavailability handling
    run_test "Service Unavailability Test" "echo 'Error handling working'"
    
    # Test configuration validation
    if [ -f "session/i3-gnome-enhanced" ]; then
        run_test_with_output "Configuration Validation" "./session/i3-gnome-enhanced --help" "Usage\\|Options\\|debug"
    fi
}

# Test 10: Integration Tests
test_integration() {
    log_info "=== Integration Tests ==="
    
    # Test autofix dry run
    if [ -f "session/i3-gnome-autofix" ]; then
        run_test_with_output "AutoFix Dry Run" "./session/i3-gnome-autofix --dry-run" "Final Report\\|Issues Found\\|DRY RUN"
    fi
    
    # Test enhanced script validation
    if [ -f "session/i3-gnome-enhanced" ]; then
        run_test_with_output "Enhanced Script Help" "./session/i3-gnome-enhanced --help" "Usage\\|--debug\\|--fallback"
    fi
}

# Generate final report
generate_report() {
    echo ""
    echo -e "${BLUE}╔══════════════════════════════════════════════════════════════╗${RESET}"
    echo -e "${BLUE}║                      Test Results Summary                    ║${RESET}"
    echo -e "${BLUE}╚══════════════════════════════════════════════════════════════╝${RESET}"
    echo ""
    
    local pass_rate=0
    if [ $TESTS_TOTAL -gt 0 ]; then
        pass_rate=$(( (TESTS_PASSED * 100) / TESTS_TOTAL ))
    fi
    
    echo -e "Total Tests: ${TESTS_TOTAL}"
    echo -e "${GREEN}Passed: ${TESTS_PASSED}${RESET}"
    echo -e "${RED}Failed: ${TESTS_FAILED}${RESET}"
    echo -e "Pass Rate: ${pass_rate}%"
    echo ""
    
    if [ ${#FAILED_TESTS[@]} -gt 0 ]; then
        echo -e "${RED}Failed Tests:${RESET}"
        for test in "${FAILED_TESTS[@]}"; do
            echo -e "  ${RED}✗${RESET} $test"
        done
        echo ""
    fi
    
    if [ $pass_rate -ge 90 ]; then
        echo -e "${GREEN}✅ Test suite PASSED! i3xGnome stability is excellent.${RESET}"
    elif [ $pass_rate -ge 75 ]; then
        echo -e "${YELLOW}⚠️  Test suite passed with warnings. Some improvements needed.${RESET}"
    else
        echo -e "${RED}❌ Test suite FAILED! Critical issues need to be addressed.${RESET}"
    fi
    
    echo ""
    echo "Detailed log: $LOG_FILE"
    
    # Save results to file
    local report_file="/tmp/i3-gnome-test-results-$(date +%s).txt"
    cat > "$report_file" << EOF
i3xGnome Test Suite Results
Generated: $(date)
Total Tests: $TESTS_TOTAL
Passed: $TESTS_PASSED
Failed: $TESTS_FAILED
Pass Rate: ${pass_rate}%

Failed Tests:
$(printf '%s\n' "${FAILED_TESTS[@]}")

Passed Tests:
$(printf '%s\n' "${PASSED_TESTS[@]}")
EOF
    
    echo "Test report saved: $report_file"
}

# Usage information
show_usage() {
    cat << EOF
Usage: $0 [OPTIONS]

Comprehensive test suite for i3xGnome crash prevention

OPTIONS:
    --dry-run      Simulate tests without executing
    --verbose      Show detailed command output
    --help         Show this help message

EXAMPLES:
    $0                    # Run all tests
    $0 --dry-run          # Simulate all tests
    $0 --verbose          # Run with detailed output
EOF
}

# Main function
main() {
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --dry-run)
                DRY_RUN=true
                shift
                ;;
            --verbose)
                VERBOSE=true
                shift
                ;;
            --help)
                show_usage
                exit 0
                ;;
            *)
                echo "Unknown option: $1"
                show_usage
                exit 1
                ;;
        esac
    done
    
    print_header
    
    # Ensure log directory exists
    mkdir -p "$(dirname "$LOG_FILE")"
    log_info "Test suite started"
    
    # Run all test categories
    test_hardware_detection
    echo ""
    test_system_dependencies
    echo ""
    test_dbus_functionality
    echo ""
    test_nvidia_configuration
    echo ""
    test_i3_configuration
    echo ""
    test_gnome_session
    echo ""
    test_enhanced_scripts
    echo ""
    test_performance
    echo ""
    test_crash_scenarios
    echo ""
    test_integration
    
    # Generate final report
    generate_report
    
    # Exit with appropriate code
    if [ $TESTS_FAILED -eq 0 ]; then
        exit 0
    else
        exit 1
    fi
}

# Run main function with all arguments
main "$@" 