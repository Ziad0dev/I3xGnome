name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up build environment
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential debhelper devscripts rpm fakeroot dpkg-dev
      
      - name: Extract version
        id: version
        run: |
          VERSION=$(grep 'VERSION =' Makefile | cut -d'=' -f2 | tr -d ' ')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Build Debian package
        run: |
          mkdir -p dist
          echo "Creating simple DEB package using dpkg-deb"
          # Extract version and print it for debugging
          VERSION=$(grep 'VERSION =' Makefile | cut -d'=' -f2 | tr -d ' ')
          echo "Extracted Version: $VERSION"
          # Prepare files in a staging directory
          STAGING="/tmp/i3-gnome-staging"
          mkdir -p "$STAGING/DEBIAN" "$STAGING/usr/bin" "$STAGING/usr/share/applications" \
                   "$STAGING/usr/share/gnome-session/sessions" "$STAGING/usr/share/xsessions"
          # Copy files to staging
          cp session/i3-gnome "$STAGING/usr/bin/"
          cp session/gnome-session-i3 "$STAGING/usr/bin/"
          cp session/i3-gnome.session "$STAGING/usr/share/gnome-session/sessions/"
          cp session/i3-gnome.desktop "$STAGING/usr/share/applications/"
          cp session/i3-gnome-xsession.desktop "$STAGING/usr/share/xsessions/i3-gnome.desktop"
          chmod 755 "$STAGING/usr/bin/i3-gnome" "$STAGING/usr/bin/gnome-session-i3"
          chmod 644 "$STAGING/usr/share/gnome-session/sessions/i3-gnome.session" \
                    "$STAGING/usr/share/applications/i3-gnome.desktop" \
                    "$STAGING/usr/share/xsessions/i3-gnome.desktop"
          # Create control file template
          cat > "$STAGING/DEBIAN/control" << EOF
          Package: i3-gnome
          Version: __VERSION__
          Section: x11
          Priority: optional
          Architecture: all
          Depends: i3-wm | i3, gnome-session, gnome-settings-daemon, dbus-x11
          Recommends: gdm3
          Maintainer: ziad 66523061+Ziad0dev@users.noreply.github.com
          Description: GNOME integration for i3 window manager
           i3-gnome integrates i3 with GNOME Session for a better desktop experience.
          EOF
          # Replace placeholder with actual version
          echo "Replacing version placeholder in control file..."
          sed -i "s/__VERSION__/$VERSION/g" "$STAGING/DEBIAN/control"
          # Print the final control file for debugging
          echo "--- Final Control File --- "
          cat "$STAGING/DEBIAN/control"
          echo "--------------------------"
          # Build the package
          echo "Building Debian package..."
          dpkg-deb --build "$STAGING" "dist/i3-gnome_${VERSION}-1_all.deb"
      
      - name: Build RPM package
        run: |
          chmod +x packaging/build-rpm.sh
          packaging/build-rpm.sh
      
      - name: Create tarball
        run: |
          VERSION=$(grep 'VERSION =' Makefile | cut -d'=' -f2 | tr -d ' ')
          BUILD_DIR="/tmp/i3-gnome-tarball"
          mkdir -p "$BUILD_DIR"
          cp -r ./* "$BUILD_DIR"
          rm -rf "$BUILD_DIR/.git" "$BUILD_DIR/dist"
          tar -czf "dist/i3-gnome-$VERSION.tar.gz" -C "$(dirname $BUILD_DIR)" "$(basename $BUILD_DIR)"
      
      - name: Build binary package
        run: |
          chmod +x packaging/build-binary.sh
          packaging/build-binary.sh
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages
          path: dist/
      
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: i3-gnome ${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
          files: |
            dist/*.deb
            dist/*.rpm
            dist/*.tar.gz
            dist/*.run
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  publish-packages:
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    
    permissions:
      packages: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: packages
          path: dist
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract version and set lowercase owner
        id: vars
        run: |
          echo "Original Owner: ${{ github.repository_owner }}"
          LOWER_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "Calculated Lower Owner: $LOWER_OWNER"
          echo "OWNER_LC=$LOWER_OWNER" >> $GITHUB_ENV
          echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
          echo "--- GITHUB_ENV content check ---"
          cat $GITHUB_ENV
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: packaging/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ env.OWNER_LC }}/i3-gnome:latest
            ghcr.io/${{ env.OWNER_LC }}/i3-gnome:${{ env.VERSION }} 
